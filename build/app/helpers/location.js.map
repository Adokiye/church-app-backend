{"version":3,"sources":["../../../src/app/helpers/location.js"],"names":["getLatLonDiffInMeters","lat1","lon1","lat2","lon2","deg2rad","deg","Math","PI","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","insidePolygon","point","vs","x","y","inside","i","j","length","xi","yi","xj","yj","intersect"],"mappings":";;;;;;;AAES,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAA2B;AAC9DC,EAAAA,OAAO,GAAC,iBAACC,GAAD,EAAQ;AACZ,WAAOA,GAAG,IAAIC,IAAI,CAACC,EAAL,GAAU,GAAd,CAAV;AACD,GAFH;;AAGA,MAAIC,CAAC,GAAG,IAAR,CAJ8D,CAIhD;;AACd,MAAIC,IAAI,GAAGL,OAAO,CAACF,IAAI,GAAGF,IAAR,CAAlB,CAL8D,CAK7B;;AACjC,MAAIU,IAAI,GAAGN,OAAO,CAACD,IAAI,GAAGF,IAAR,CAAlB;AACA,MAAIU,CAAC,GACHL,IAAI,CAACM,GAAL,CAASH,IAAI,GAAG,CAAhB,IAAqBH,IAAI,CAACM,GAAL,CAASH,IAAI,GAAG,CAAhB,CAArB,GACAH,IAAI,CAACO,GAAL,CAAST,OAAO,CAACJ,IAAD,CAAhB,IACEM,IAAI,CAACO,GAAL,CAAST,OAAO,CAACF,IAAD,CAAhB,CADF,GAEEI,IAAI,CAACM,GAAL,CAASF,IAAI,GAAG,CAAhB,CAFF,GAGEJ,IAAI,CAACM,GAAL,CAASF,IAAI,GAAG,CAAhB,CALJ;AAMA,MAAII,CAAC,GAAG,IAAIR,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACU,IAAL,CAAUL,CAAV,CAAX,EAAyBL,IAAI,CAACU,IAAL,CAAU,IAAIL,CAAd,CAAzB,CAAZ;AACA,MAAIM,CAAC,GAAGT,CAAC,GAAGM,CAAZ,CAd8D,CAc/C;;AACf,SAAOG,CAAC,GAAG,IAAX;AACD,CAhBM;;;;AAkBA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,EAAR,EAAc;AACzC;AACA;AAEA,MAAIC,CAAC,GAAGF,KAAK,CAAC,CAAD,CAAb;AAAA,MAAkBG,CAAC,GAAGH,KAAK,CAAC,CAAD,CAA3B;AAEA,MAAII,MAAM,GAAG,KAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,EAAE,CAACM,MAAH,GAAY,CAAhC,EAAmCF,CAAC,GAAGJ,EAAE,CAACM,MAA1C,EAAkDD,CAAC,GAAGD,CAAC,EAAvD,EAA2D;AACvD,QAAIG,EAAE,GAAGP,EAAE,CAACI,CAAD,CAAF,CAAM,CAAN,CAAT;AAAA,QAAmBI,EAAE,GAAGR,EAAE,CAACI,CAAD,CAAF,CAAM,CAAN,CAAxB;AACA,QAAIK,EAAE,GAAGT,EAAE,CAACK,CAAD,CAAF,CAAM,CAAN,CAAT;AAAA,QAAmBK,EAAE,GAAGV,EAAE,CAACK,CAAD,CAAF,CAAM,CAAN,CAAxB;AAEA,QAAIM,SAAS,GAAKH,EAAE,GAAGN,CAAN,IAAaQ,EAAE,GAAGR,CAAnB,IACRD,CAAC,GAAG,CAACQ,EAAE,GAAGF,EAAN,KAAaL,CAAC,GAAGM,EAAjB,KAAwBE,EAAE,GAAGF,EAA7B,IAAmCD,EAD/C;AAEA,QAAII,SAAJ,EAAeR,MAAM,GAAG,CAACA,MAAV;AAClB;;AAED,SAAOA,MAAP;AACH,CAjBQ","sourcesContent":["\n\n  export const getLatLonDiffInMeters = (lat1, lon1, lat2, lon2) =>{\n    deg2rad=(deg)=> {\n        return deg * (Math.PI / 180);\n      }\n    var R = 6371; // radius of the earth in km\n    var dLat = deg2rad(lat2 - lat1); // deg2rad below\n    var dLon = deg2rad(lon2 - lon1);\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c; // distance in km\n    return d * 1000;\n  }\n\n  export const insidePolygon = (point, vs) =>{\n    // ray-casting algorithm based on\n    // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n    \n    var x = point[0], y = point[1];\n    \n    var inside = false;\n    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n        var xi = vs[i][0], yi = vs[i][1];\n        var xj = vs[j][0], yj = vs[j][1];\n        \n        var intersect = ((yi > y) != (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    \n    return inside;\n};"],"file":"location.js"}