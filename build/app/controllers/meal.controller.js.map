{"version":3,"sources":["../../../src/app/controllers/meal.controller.js"],"names":["updateMeal","ctx","body","request","role","state","user","meal_id","images","JSON","stringify","meal_descriptive_metadatas","meal_business_metadatas","meal_dietary_metadatas","meal_allergy_metadatas","meal_keywords","Meal","query","patchAndFetchById","e","console","log","meal_data","status","message","getMeals","meals_data","data","getMealAddons","by_category","MealCategory","where","withGraphJoined","modifiers","selectNameAndId","builder","select","Addons"],"mappings":"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","sourcesContent":["import MealCategory from '../models/meal_category'\nimport Meal from '../models/meal'\nimport Addons from '../models/addons'\nimport MealCategorySelectionType from '../models/meal_category_selection_type'\nimport User from '../models/user'\nimport { checkIfMarketing } from '../services/RoleService'\nimport { Unauthorized, UnprocessableEntity, NotFound } from '../helpers'\n\nexport const updateMeal = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n  let meal_id = body.meal_id\n  delete body.meal_id\n  if (await checkIfMarketing(role)) {\n    if (body.images) {\n      body.images = JSON.stringify(body.images)\n    }\n    if (body.meal_descriptive_metadatas) {\n      body.meal_descriptive_metadatas = JSON.stringify(\n        body.meal_descriptive_metadatas\n      )\n    }\n    if (body.meal_business_metadatas) {\n      body.meal_business_metadatas = JSON.stringify(\n        body.meal_business_metadatas\n      )\n    }\n    if (body.meal_dietary_metadatas) {\n      body.meal_dietary_metadatas = JSON.stringify(body.meal_dietary_metadatas)\n    }\n    if (body.meal_allergy_metadatas) {\n      body.meal_allergy_metadatas = JSON.stringify(body.meal_allergy_metadatas)\n    }\n    if (body.meal_keywords) {\n      body.meal_keywords = JSON.stringify(body.meal_keywords)\n    }\n    const meal_data = await await Meal.query()\n      .patchAndFetchById(meal_id, body)\n      //  .withGraphFetched('[brand]')\n      .catch(e => {\n        console.log(e)\n        throw UnprocessableEntity('Invalid Body')\n      })\n    return {\n      status: 'success',\n      message: 'Meal updated Successfully',\n      ...meal_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const getMeals = async ctx => {\n  const meals_data = await await Meal.query()\n    // .withGraphFetched('[meal_category,brand]')\n    .catch(e => {\n      console.log(e)\n      return []\n    })\n  return {\n    status: 'success',\n    message: 'Meals returned Successfully',\n    data: meals_data\n  }\n}\n\nexport const getMealAddons = async ctx => {\n  const { body } = ctx.request\n  let meal_id = body.meal_id\n  if (body.by_category) {\n    const meals_data = await await MealCategory.query()\n      .where('addons.meal_id', meal_id)\n      .withGraphJoined(\n        '[addons.[meal_data], meal_category_selection_type(selectNameAndId)]'\n      )\n      .modifiers({\n        selectNameAndId(builder) {\n          builder.select('name', 'id')\n        }\n      })\n      .catch(e => {\n        console.log(e)\n        return []\n      })\n    return {\n      status: 'success',\n      message: 'Addons returned Successfully',\n      data: meals_data\n    }\n  } else {\n    const meals_data = await await Addons.query()\n      .where('meal_id', meal_id)\n      .withGraphJoined(\n        '[meal_data.[meal_category.[meal_category_selection_type(selectNameAndId)]]]'\n      )\n      .modifiers({\n        selectNameAndId(builder) {\n          builder.select('name', 'id')\n        }\n      })\n      .catch(e => {\n        console.log(e)\n        return []\n      })\n    return {\n      status: 'success',\n      message: 'Addons returned Successfully',\n      data: meals_data\n    }\n  }\n}\n"],"file":"meal.controller.js"}