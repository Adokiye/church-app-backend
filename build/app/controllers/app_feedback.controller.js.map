{"version":3,"sources":["../../../src/app/controllers/app_feedback.controller.js"],"names":["createAppFeedback","ctx","body","request","user","state","User","query","findOne","id","e","console","log","user_data","user_id","AppFeedback","insert","app_feedback_data","status","message","getAppFeedbacks","role","withGraphFetched","data"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEO,IAAMA,iBAAiB;AAAA,2FAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,IADuB,GACdD,GAAG,CAACE,OADU,CACvBD,IADuB;AAEvBE,YAAAA,IAFuB,GAEdH,GAAG,CAACI,KAAJ,CAAUD,IAFI,CAEvBA,IAFuB;AAAA;AAAA,mBAIPE,iBAAKC,KAAL,GACrBC,OADqB,CACb;AACPC,cAAAA,EAAE,EAAEL,IAAI,CAACK;AADF,aADa,WAIf,UAAAC,CAAC,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,qBAAO,KAAP;AACD,aAPqB,CAJO;;AAAA;AAIzBG,YAAAA,SAJyB;;AAAA,gBAa1BA,SAb0B;AAAA;AAAA;AAAA;;AAAA,kBAcvB,2BAAa,gCAAb,CAduB;;AAAA;AAgB7BX,YAAAA,IAAI,CAACY,OAAL,GAAeV,IAAI,CAACK,EAApB;AAhB6B;AAAA,mBAiBGM,yBAAYR,KAAZ,GAAoBS,MAApB,CAA2Bd,IAA3B,CAjBH;;AAAA;AAiBvBe,YAAAA,iBAjBuB;AAAA;AAmB3BC,cAAAA,MAAM,EAAE,SAnBmB;AAoB3BC,cAAAA,OAAO,EAAE;AApBkB,eAqBxBF,iBArBwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBjB,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;;;AA0BA,IAAMoB,eAAe;AAAA,4FAAG,kBAAMnB,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,IADqB,GACZD,GAAG,CAACE,OADQ,CACrBD,IADqB;AAErBmB,YAAAA,IAFqB,GAEZpB,GAAG,CAACI,KAAJ,CAAUD,IAAV,CAAeA,IAFH,CAErBiB,IAFqB;AAAA;AAAA,mBAInB,mCAAiBA,IAAjB,CAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKWN,yBAAYR,KAAZ,GACnCe,gBADmC,CAClB,QADkB,WAE7B,UAAAZ,CAAC,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,qBAAO,EAAP;AACD,aALmC,CALX;;AAAA;AAKrBO,YAAAA,iBALqB;AAAA,8CAWpB;AACLC,cAAAA,MAAM,EAAE,SADH;AAELC,cAAAA,OAAO,EAAE,yCAFJ;AAGLI,cAAAA,IAAI,EAAEN;AAHD,aAXoB;;AAAA;AAAA,kBAiBrB,2BAAa,cAAb,CAjBqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfG,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import AppFeedback from '../models/app_feedback'\nimport User from '../models/user'\nimport { checkIfMarketing } from '../services/RoleService'\nimport { Unauthorized, NotFound } from '../helpers'\n\nexport const createAppFeedback = async ctx => {\n  const { body } = ctx.request\n  const { user } = ctx.state.user\n\n  const user_data = await User.query()\n    .findOne({\n      id: user.id\n    })\n    .catch(e => {\n      console.log(e)\n      return false\n    })\n\n  if (!user_data) {\n    throw Unauthorized('User not Found. Please sign up')\n  } else {\n    body.user_id = user.id\n    const app_feedback_data = await AppFeedback.query().insert(body)\n    return {\n      status: 'success',\n      message: 'App feedback posted Successfully',\n      ...app_feedback_data\n    }\n  }\n}\n\nexport const getAppFeedbacks = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    const app_feedback_data = await await AppFeedback.query()\n      .withGraphFetched('[user]')\n      .catch(e => {\n        console.log(e)\n        return []\n      })\n    return {\n      status: 'success',\n      message: 'App feedback data returned Successfully',\n      data: app_feedback_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n"],"file":"app_feedback.controller.js"}