{"version":3,"sources":["../../../src/app/controllers/brand.controller.js"],"names":["updateBrand","ctx","id","params","body","request","role","state","user","posist_data","Brand","query","patchAndFetchById","brand_data","status","message","getBrandsForCustomer","lat","lng","CokitchenPolygon","withGraphFetched","cokitchen_polygons","cokitchens","i","len","length","polygon","push","cokitchen","data","brands"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,IAAMA,WAAW;AAAA,2FAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,EADiB,GACVD,GAAG,CAACE,MADM,CACjBD,EADiB;AAEjBE,YAAAA,IAFiB,GAERH,GAAG,CAACI,OAFI,CAEjBD,IAFiB;AAGjBE,YAAAA,IAHiB,GAGRL,GAAG,CAACM,KAAJ,CAAUC,IAAV,CAAeA,IAHP,CAGjBF,IAHiB;AAAA;AAAA,mBAKf,mCAAiBA,IAAjB,CALe;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMvB,gBAAIF,IAAI,CAACK,WAAT,EAAsB;AACpB,qBAAOL,IAAI,CAACK,WAAZ;AACD;;AARsB;AAAA,mBASEC,kBAAMC,KAAN,GAAcC,iBAAd,CAAgCV,EAAhC,EAAoCE,IAApC,CATF;;AAAA;AASjBS,YAAAA,UATiB;AAAA;AAWrBC,cAAAA,MAAM,EAAE,SAXa;AAYrBC,cAAAA,OAAO,EAAE;AAZY,eAalBF,UAbkB;;AAAA;AAAA,kBAgBjB,2BAAa,qBAAb,CAhBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXb,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAoBA,IAAMgB,oBAAoB;AAAA,4FAAG,kBAAMf,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BG,YAAAA,IAD0B,GACjBH,GAAG,CAACI,OADa,CAC1BD,IAD0B;AAE1Ba,YAAAA,GAF0B,GAEbb,IAFa,CAE1Ba,GAF0B,EAErBC,GAFqB,GAEbd,IAFa,CAErBc,GAFqB;AAAA;AAAA,mBAGDC,8BAAiBR,KAAjB,GAAyBS,gBAAzB,CAC/B,oBAD+B,CAHC;;AAAA;AAG5BC,YAAAA,kBAH4B;AAM9BC,YAAAA,UAN8B,GAMjB,EANiB;AAO9BC,YAAAA,CAP8B,GAO1B,CAP0B,EAQhCC,GARgC,GAQ1BH,kBAAkB,CAACI,MARO;;AAAA;AAAA,kBAS3BF,CAAC,GAAGC,GATuB;AAAA;AAAA;AAAA;;AAAA,iBAU5B,4BAAc,CAACP,GAAD,EAAMC,GAAN,CAAd,EAA0BG,kBAAkB,CAACE,CAAD,CAAlB,CAAsBG,OAAhD,CAV4B;AAAA;AAAA;AAAA;;AAW9BJ,YAAAA,UAAU,CAACK,IAAX,CAAgBN,kBAAkB,CAACE,CAAD,CAAlB,CAAsBK,SAAtC;AAX8B,8CAYvB;AACLd,cAAAA,MAAM,EAAE,SADH;AAELe,cAAAA,IAAI,EAAER,kBAAkB,CAACE,CAAD,CAAlB,CAAsBK,SAAtB,CAAgCE;AAFjC,aAZuB;;AAAA;AAkBhCP,YAAAA,CAAC;AAlB+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBP,oBAAoB;AAAA;AAAA;AAAA,GAA1B","sourcesContent":["import Brand from '../models/brand'\nimport Cokitchen from '../models/cokitchen'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport { checkIfAdmin, checkIfMarketing } from '../services/RoleService'\nimport { Unauthorized, insidePolygon } from '../helpers'\n\nexport const updateBrand = async ctx => {\n  const { id } = ctx.params\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    if (body.posist_data) {\n      delete body.posist_data\n    }\n    const brand_data = await Brand.query().patchAndFetchById(id, body)\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...brand_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Update')\n  }\n}\n\nexport const getBrandsForCustomer = async ctx => {\n  const { body } = ctx.request\n  const { lat, lng } = body\n  const cokitchen_polygons = await CokitchenPolygon.query().withGraphFetched(\n    'cokitchen.[brands]'\n  )\n  var cokitchens = []\n  var i = 0,\n    len = cokitchen_polygons.length\n  while (i < len) {\n    if (insidePolygon([lat, lng], cokitchen_polygons[i].polygon)) {\n      cokitchens.push(cokitchen_polygons[i].cokitchen)\n      return {\n        status: 'success',\n        data: cokitchen_polygons[i].cokitchen.brands\n      }\n    }\n\n    i++\n  }\n}\n"],"file":"brand.controller.js"}