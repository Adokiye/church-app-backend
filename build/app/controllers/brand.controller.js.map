{"version":3,"sources":["../../../src/app/controllers/brand.controller.js"],"names":["updateBrand","ctx","id","params","body","request","role","state","user","name","posist_data","Brand","query","patchAndFetchById","brand_data","status","message","getBrandsForCustomer","lat","lng","CokitchenPolygon","withGraphFetched","cokitchen_polygons","cokitchens","i","len","length","polygon","push","cokitchen","data","brands"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAIA;;;;;;AAEO,IAAMA,WAAW;AAAA,2FAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,EADiB,GACVD,GAAG,CAACE,MADM,CACjBD,EADiB;AAEjBE,YAAAA,IAFiB,GAERH,GAAG,CAACI,OAFI,CAEjBD,IAFiB;AAGjBE,YAAAA,IAHiB,GAGRL,GAAG,CAACM,KAAJ,CAAUC,IAHF,CAGjBF,IAHiB;;AAAA,iBAKrB,mCAAiBA,IAAI,CAACG,IAAtB,CALqB;AAAA;AAAA;AAAA;;AAMvB,gBAAIL,IAAI,CAACM,WAAT,EAAsB;AACpB,qBAAON,IAAI,CAACM,WAAZ;AACD;;AARsB;AAAA,mBASEC,kBAAMC,KAAN,GAAcC,iBAAd,CACvBX,EADuB,EAEvBE,IAFuB,CATF;;AAAA;AASjBU,YAAAA,UATiB;AAAA;AAcrBC,cAAAA,MAAM,EAAE,SAda;AAerBC,cAAAA,OAAO,EAAE;AAfY,eAgBlBF,UAhBkB;;AAAA;AAAA,kBAmBjB,2BAAa,qBAAb,CAnBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXd,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAuBA,IAAMiB,oBAAoB;AAAA,4FAAG,kBAAMhB,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBG,YAAAA,IADwB,GACfH,GAAG,CAACI,OADW,CACxBD,IADwB;AAEzBc,YAAAA,GAFyB,GAEbd,IAFa,CAEzBc,GAFyB,EAEpBC,GAFoB,GAEbf,IAFa,CAEpBe,GAFoB;AAAA;AAAA,mBAGCC,8BAAiBR,KAAjB,GAAyBS,gBAAzB,CAA0C,oBAA1C,CAHD;;AAAA;AAG1BC,YAAAA,kBAH0B;AAI5BC,YAAAA,UAJ4B,GAIf,EAJe;AAK5BC,YAAAA,CAL4B,GAKxB,CALwB,EAKrBC,GALqB,GAKfH,kBAAkB,CAACI,MALJ;;AAAA;AAAA,kBAMzBF,CAAC,GAAGC,GANqB;AAAA;AAAA;AAAA;;AAAA,iBAOvB,4BAAc,CAAEP,GAAF,EAAOC,GAAP,CAAd,EAA4BG,kBAAkB,CAACE,CAAD,CAAlB,CAAsBG,OAAlD,CAPuB;AAAA;AAAA;AAAA;;AAQxBJ,YAAAA,UAAU,CAACK,IAAX,CAAgBN,kBAAkB,CAACE,CAAD,CAAlB,CAAsBK,SAAtC;AARwB,8CASjB;AACHd,cAAAA,MAAM,EAAE,SADL;AAEHe,cAAAA,IAAI,EAACR,kBAAkB,CAACE,CAAD,CAAlB,CAAsBK,SAAtB,CAAgCE;AAFlC,aATiB;;AAAA;AAe5BP,YAAAA,CAAC;AAf2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBP,oBAAoB;AAAA;AAAA;AAAA,GAA1B","sourcesContent":["import Brand from '../models/brand'\nimport Cokitchen from '../models/cokitchen'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport {\n  checkIfAdmin,\n  checkIfMarketing\n} from '../services/RoleService'\nimport { Unauthorized ,insidePolygon} from '../helpers'\n\nexport const updateBrand = async ctx => {\n  const { id } = ctx.params\n  const { body } = ctx.request\n  const { role } = ctx.state.user\n\n  if (checkIfMarketing(role.name)) {\n    if (body.posist_data) {\n      delete body.posist_data\n    }\n    const brand_data = await Brand.query().patchAndFetchById(\n      id,\n      body\n    )\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...brand_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Update')\n  }\n}\n\nexport const getBrandsForCustomer = async ctx =>{\n    const { body } = ctx.request\n    const {lat, lng} = body\n    const cokitchen_polygons = await CokitchenPolygon.query().withGraphFetched('cokitchen.[brands]');\n    var cokitchens = []\n    var i = 0, len = cokitchen_polygons.length;\n    while (i < len) {\n          if(insidePolygon([ lat, lng ], cokitchen_polygons[i].polygon)){\n            cokitchens.push(cokitchen_polygons[i].cokitchen)\n            return {\n                status: 'success',\n                data:cokitchen_polygons[i].cokitchen.brands\n              }\n          }\n\n        i++\n    }\n   \n}\n\n"],"file":"brand.controller.js"}