{"version":3,"sources":["../../../src/app/controllers/brand.controller.js"],"names":["createBrand","ctx","id","params","body","request","role","state","user","images","JSON","stringify","Brand","query","insert","e","console","log","brand_data","status","message","updateBrand","brand_id","brand_descriptive_metadatas","brand_business_metadatas","brand_keywords","posist_data","patchAndFetchById","getBrandsForCustomer","lat","lng","CokitchenPolygon","cokitchen_polygons","i","len","length","polygon","Promise","all","Cokitchen","where","cokitchen_id","withGraphJoined","modifiers","selectNameAndId","builder","select","MealCategory","withGraphFetched","cokitchens","meal_categories","data","brands","cokitchen_explore_keywords","cokitchen_polygon","getBrandsForMarketing"],"mappings":"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","sourcesContent":["import Brand from '../models/brand'\nimport Cokitchen from '../models/cokitchen'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport MealCategory from '../models/meal_category'\nimport { checkIfAdmin, checkIfMarketing } from '../services/RoleService'\nimport { Unauthorized, insidePolygon, UnprocessableEntity } from '../helpers'\n\nexport const createBrand = async ctx => {\n  const { id } = ctx.params\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    if (body.images) {\n      body.images = JSON.stringify(body.images)\n    }\n    const brand_data = await Brand.query()\n      .insert(body)\n      .catch(e => {\n        console.log(e)\n        throw UnprocessableEntity('Invalid body')\n      })\n    return {\n      status: 'success',\n      message: 'Brand Created Successfully',\n      ...brand_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Creation')\n  }\n}\n\nexport const updateBrand = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n  const brand_id = body.brand_id\n  delete body.brand_id\n  if (body.images) {\n    body.images = JSON.stringify(body.images)\n  }\n  if (body.brand_descriptive_metadatas) {\n    body.brand_descriptive_metadatas = JSON.stringify(\n      body.brand_descriptive_metadatas\n    )\n  }\n  if (body.brand_business_metadatas) {\n    body.brand_business_metadatas = JSON.stringify(\n      body.brand_business_metadatas\n    )\n  }\n  if (body.brand_keywords) {\n    body.brand_keywords = JSON.stringify(body.brand_keywords)\n  }\n  if (await checkIfMarketing(role)) {\n    if (body.posist_data) {\n      delete body.posist_data\n    }\n    const brand_data = await Brand.query().patchAndFetchById(brand_id, body)\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...brand_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Update')\n  }\n}\n\nexport const getBrandsForCustomer = async ctx => {\n  const { body } = ctx.request\n  const { lat, lng } = body\n  const cokitchen_polygons = await CokitchenPolygon.query()\n    // .withGraphFetched('[cokitchen.[brands.[meals],cokitchen_explore_keywords]]')\n    .catch(e => {\n      console.log(e)\n      throw UnprocessableEntity('Invalid Body')\n    })\n  var i = 0,\n    len = cokitchen_polygons.length\n  while (i < len) {\n    if (insidePolygon([lat, lng], cokitchen_polygons[i].polygon)) {\n      // get cokitchen --> to be changed\n      const [cokitchens, meal_categories] = await Promise.all([\n        Cokitchen.query()\n          .where('cokitchens.id', cokitchen_polygons[i].cokitchen_id)\n          .withGraphJoined(\n            '[brands.[meal_categories.[meals,meal_category_selection_type(selectNameAndId)]],cokitchen_explore_keywords.[meal_keyword], cokitchen_polygons]'\n          )\n\n          .where('brands:meal_categories:meals.is_addon', false)\n          .modifiers({\n            selectNameAndId(builder) {\n              builder.select('name', 'id')\n            }\n          })\n          .catch(e => {\n            console.log(e)\n            return []\n          }),\n        MealCategory.query()\n          .withGraphFetched('[meal_category_selection_type]')\n          .catch(e => {\n            console.log(e)\n            return []\n          })\n      ])\n      return {\n        status: 'success',\n        data: cokitchens[0].brands,\n        cokitchen_explore_keywords: cokitchens[0].cokitchen_explore_keywords,\n        meal_categories: meal_categories,\n        cokitchen_polygon: cokitchens[0].cokitchen_polygons[0]\n      }\n    }\n    i++\n  }\n  throw UnprocessableEntity('Invalid Latitude and Longitude')\n}\n\nexport const getBrandsForMarketing = async ctx => {\n  const brands = await Brand.query()\n    .withGraphFetched('[cokitchen,meals]')\n    .catch(e => {\n      console.log(e)\n      return []\n    })\n  return {\n    status: 'success',\n    data: brands\n  }\n}\n"],"file":"brand.controller.js"}