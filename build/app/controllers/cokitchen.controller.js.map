{"version":3,"sources":["../../../src/app/controllers/cokitchen.controller.js"],"names":["createCokitchen","ctx","id","params","body","request","role","state","user","posist_data","Cokitchen","query","insert","e","console","log","cokitchen_data","status","message","updateCokitchen","cokitchen_id","images","JSON","stringify","patchAndFetchById","withGraphFetched","createCokitchenPolygon","polygon","CokitchenPolygon","cokitchen_polygon_data","updateCokitchenPolygon","cokitchen_polygon_id","deleteCokitchenPolygon","deleteById","NotFound","getAllCokitchens","Promise","all","withGraphJoined","where","MealCategory","cokitchens","meal_categories"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,IAAMA,eAAe;AAAA,2FAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,EADqB,GACdD,GAAG,CAACE,MADU,CACrBD,EADqB;AAErBE,YAAAA,IAFqB,GAEZH,GAAG,CAACI,OAFQ,CAErBD,IAFqB;AAGrBE,YAAAA,IAHqB,GAGZL,GAAG,CAACM,KAAJ,CAAUC,IAAV,CAAeA,IAHH,CAGrBF,IAHqB;AAAA;AAAA,mBAKnB,mCAAiBA,IAAjB,CALmB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM3B,gBAAIF,IAAI,CAACK,WAAT,EAAsB;AACpB,qBAAOL,IAAI,CAACK,WAAZ;AACD;;AAR0B;AAAA,mBASEC,sBAAUC,KAAV,GAC1BC,MAD0B,CACnBR,IADmB,WAEpB,UAAAS,CAAC,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,oBAAM,kCAAoB,cAApB,CAAN;AACD,aAL0B,CATF;;AAAA;AASrBG,YAAAA,cATqB;AAAA;AAgBzBC,cAAAA,MAAM,EAAE,SAhBiB;AAiBzBC,cAAAA,OAAO,EAAE;AAjBgB,eAkBtBF,cAlBsB;;AAAA;AAAA,kBAqBrB,2BAAa,uBAAb,CArBqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfhB,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAyBA,IAAMmB,eAAe;AAAA,4FAAG,kBAAMlB,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBG,YAAAA,IADqB,GACZH,GAAG,CAACI,OADQ,CACrBD,IADqB;AAErBE,YAAAA,IAFqB,GAEZL,GAAG,CAACM,KAAJ,CAAUC,IAAV,CAAeA,IAFH,CAErBF,IAFqB;AAGzBc,YAAAA,YAHyB,GAGVhB,IAAI,CAACgB,YAHK;AAI7B,mBAAOhB,IAAI,CAACgB,YAAZ;AAJ6B;AAAA,mBAKnB,mCAAiBd,IAAjB,CALmB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM3B,gBAAIF,IAAI,CAACiB,MAAT,EAAiB;AACfjB,cAAAA,IAAI,CAACiB,MAAL,GAAcC,IAAI,CAACC,SAAL,CAAenB,IAAI,CAACiB,MAApB,CAAd;AACD;;AAR0B;AAAA,mBAUEX,sBAAUC,KAAV,GAC1Ba,iBAD0B,CACRJ,YADQ,EACMhB,IADN,EAE1BqB,gBAF0B,CAET,UAFS,CAVF;;AAAA;AAUrBT,YAAAA,cAVqB;AAAA;AAczBC,cAAAA,MAAM,EAAE,SAdiB;AAezBC,cAAAA,OAAO,EAAE;AAfgB,eAgBtBF,cAhBsB;;AAAA;AAAA,kBAmBrB,2BAAa,qBAAb,CAnBqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfG,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAuBA,IAAMO,sBAAsB;AAAA,4FAAG,kBAAMzB,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC5BG,YAAAA,IAD4B,GACnBH,GAAG,CAACI,OADe,CAC5BD,IAD4B;AAAA,mCAEfH,GAAG,CAACM,KAAJ,CAAUC,IAAV,CAAeA,IAFA,EAE5BN,EAF4B,wBAE5BA,EAF4B,EAExBI,IAFwB,wBAExBA,IAFwB;AAAA;AAAA,mBAI1B,mCAAiBA,IAAjB,CAJ0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKlC,gBAAIF,IAAI,CAACuB,OAAT,EAAkB;AAChBvB,cAAAA,IAAI,CAACuB,OAAL,GAAeL,IAAI,CAACC,SAAL,CAAenB,IAAI,CAACuB,OAApB,CAAf;AACD;;AAPiC;AAAA,mBAQGC,8BAAiBjB,KAAjB,GAClCC,MADkC,CAC3BR,IAD2B,WAE5B,UAAAS,CAAC,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,oBAAM,kCAAoB,cAApB,CAAN;AACD,aALkC,CARH;;AAAA;AAQ5BgB,YAAAA,sBAR4B;AAAA;AAgBhCZ,cAAAA,MAAM,EAAE,SAhBwB;AAiBhCC,cAAAA,OAAO,EAAE;AAjBuB,eAkB7BW,sBAlB6B;;AAAA;AAAA,kBAqB5B,2BAAa,cAAb,CArB4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBH,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;;;AAyBA,IAAMI,sBAAsB;AAAA,4FAAG,kBAAM7B,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BG,YAAAA,IAD4B,GACnBH,GAAG,CAACI,OADe,CAC5BD,IAD4B;AAE5BE,YAAAA,IAF4B,GAEnBL,GAAG,CAACM,KAAJ,CAAUC,IAAV,CAAeA,IAFI,CAE5BF,IAF4B;AAG9ByB,YAAAA,oBAH8B,GAGP3B,IAAI,CAAC2B,oBAHE;AAIpC,mBAAO3B,IAAI,CAAC2B,oBAAZ;AAJoC;AAAA,mBAK1B,mCAAiBzB,IAAjB,CAL0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMlC,gBAAIF,IAAI,CAACuB,OAAT,EAAkB;AAChBvB,cAAAA,IAAI,CAACuB,OAAL,GAAeL,IAAI,CAACC,SAAL,CAAenB,IAAI,CAACuB,OAApB,CAAf;AACD;;AARiC;AAAA,mBASGC,8BAAiBjB,KAAjB,GAAyBa,iBAAzB,CACnCO,oBADmC,EAEnC3B,IAFmC,CATH;;AAAA;AAS5ByB,YAAAA,sBAT4B;AAAA;AAehCZ,cAAAA,MAAM,EAAE,SAfwB;AAgBhCC,cAAAA,OAAO,EAAE;AAhBuB,eAiB7BW,sBAjB6B;;AAAA;AAAA,kBAoB5B,2BAAa,qBAAb,CApB4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBC,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;;;AAwBA,IAAME,sBAAsB;AAAA,4FAAG,kBAAM/B,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BE,YAAAA,MAD4B,GACjBF,GADiB,CAC5BE,MAD4B;AAE5BG,YAAAA,IAF4B,GAEnBL,GAAG,CAACM,KAAJ,CAAUC,IAAV,CAAeA,IAFI,CAE5BF,IAF4B;AAAA;AAAA,mBAI1B,mCAAiBA,IAAjB,CAJ0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAK5BsB,8BAAiBjB,KAAjB,GACHsB,UADG,CACQ9B,MAAM,CAACD,EADf,WAEG,YAAM;AACX,oBAAMgC,QAAQ,CAAC,6BAAD,CAAd;AACD,aAJG,CAL4B;;AAAA;AAAA,8CAU3B;AACLjB,cAAAA,MAAM,EAAE,SADH;AAELC,cAAAA,OAAO,EAAE;AAFJ,aAV2B;;AAAA;AAAA,kBAe5B,2BAAa,qBAAb,CAf4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBc,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;;;AAmBA,IAAMG,gBAAgB;AAAA,4FAAG,kBAAMlC,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcmC,OAAO,CAACC,GAAR,CAAY,CACtD3B,sBAAUC,KAAV,GACG2B,eADH,CAEI,gGAFJ,EAKGC,KALH,CAKS,uBALT,EAKkC,KALlC,WAOS,UAAA1B,CAAC,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,qBAAO,EAAP;AACD,aAVH,CADsD,EAYtD2B,0BAAa7B,KAAb,GACGc,gBADH,CACoB,gCADpB,WAGS,UAAAZ,CAAC,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,qBAAO,EAAP;AACD,aANH,CAZsD,CAAZ,CADd;;AAAA;AAAA;AAAA;AACvB4B,YAAAA,UADuB;AACXC,YAAAA,eADW;AAAA,8CAqBvB;AACLzB,cAAAA,MAAM,EAAE,SADH;AAELwB,cAAAA,UAAU,EAAVA,UAFK;AAGLC,cAAAA,eAAe,EAAfA;AAHK,aArBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBP,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import Cokitchen from '../models/cokitchen'\nimport Meal from '../models/meal'\nimport MealCategory from '../models/meal_category'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport { checkIfAdmin, checkIfMarketing } from '../services/RoleService'\nimport { Unauthorized, UnprocessableEntity } from '../helpers'\n\nexport const createCokitchen = async ctx => {\n  const { id } = ctx.params\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    if (body.posist_data) {\n      delete body.posist_data\n    }\n    const cokitchen_data = await Cokitchen.query()\n      .insert(body)\n      .catch(e => {\n        console.log(e)\n        throw UnprocessableEntity('Invalid body')\n      })\n    return {\n      status: 'success',\n      message: 'Creation Successful',\n      ...cokitchen_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Creation')\n  }\n}\n\nexport const updateCokitchen = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n  let cokitchen_id = body.cokitchen_id\n  delete body.cokitchen_id\n  if (await checkIfMarketing(role)) {\n    if (body.images) {\n      body.images = JSON.stringify(body.images)\n    }\n\n    const cokitchen_data = await Cokitchen.query()\n      .patchAndFetchById(cokitchen_id, body)\n      .withGraphFetched('[brands]')\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...cokitchen_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Update')\n  }\n}\n\nexport const createCokitchenPolygon = async ctx => {\n  const { body } = ctx.request\n  const { id, role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    if (body.polygon) {\n      body.polygon = JSON.stringify(body.polygon)\n    }\n    const cokitchen_polygon_data = await CokitchenPolygon.query()\n      .insert(body)\n      .catch(e => {\n        console.log(e)\n        throw UnprocessableEntity('Invalid Body')\n      })\n    //  .withGraphFetched('[cokitchen]')\n    return {\n      status: 'success',\n      message: 'Creation of cokitchen polygon Successful',\n      ...cokitchen_polygon_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const updateCokitchenPolygon = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n  const cokitchen_polygon_id = body.cokitchen_polygon_id\n  delete body.cokitchen_polygon_id\n  if (await checkIfMarketing(role)) {\n    if (body.polygon) {\n      body.polygon = JSON.stringify(body.polygon)\n    }\n    const cokitchen_polygon_data = await CokitchenPolygon.query().patchAndFetchById(\n      cokitchen_polygon_id,\n      body\n    )\n    //   .withGraphFetched('[cokitchen]')\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...cokitchen_polygon_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Update')\n  }\n}\n\nexport const deleteCokitchenPolygon = async ctx => {\n  const { params } = ctx\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    await CokitchenPolygon.query()\n      .deleteById(params.id)\n      .catch(() => {\n        throw NotFound('Cokitchen polygon not found')\n      })\n    return {\n      status: 'success',\n      message: 'Cokitchen polygon Deleted Successfully'\n    }\n  } else {\n    throw Unauthorized('Unauthorized Delete')\n  }\n}\n\nexport const getAllCokitchens = async ctx => {\n  const [cokitchens, meal_categories] = await Promise.all([\n    Cokitchen.query()\n      .withGraphJoined(\n        '[brands.[meals.[meal_category]],cokitchen_explore_keywords.[meal_keyword], cokitchen_polygons]'\n      )\n\n      .where('brands:meals.is_addon', false)\n\n      .catch(e => {\n        console.log(e)\n        return []\n      }),\n    MealCategory.query()\n      .withGraphFetched('[meal_category_selection_type]')\n\n      .catch(e => {\n        console.log(e)\n        return []\n      })\n  ])\n  return {\n    status: 'success',\n    cokitchens,\n    meal_categories\n  }\n}\n"],"file":"cokitchen.controller.js"}