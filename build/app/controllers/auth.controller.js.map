{"version":3,"sources":["../../../src/app/controllers/auth.controller.js"],"names":["status","message","sendOtp","ctx","body","request","OtpService","phone_number","action","verifyOtp","next","otp","res","json","errors","Otp","query","findOne","otpInDb","JwtService","verify","otp_token","decoded","create","User","userInDb","userData","token","sign","user","patchAndFetchById","id","active","update","state","updateDeviceToken","DeviceToken","insert","user_id","adminUpdateUser","role","password","user_data","marketingCreateStaff","registerAsMarketing","registerAsLogisticsAdmin","adminGetUsers","data","adminGetUserRoles","Role","login","email","bcrypt","compare","isValid","loginMarketing","loginLogisticsAdmin","verifyUser","findUserName","username","me","withGraphFetched","e","console","log"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AAMA;;AAOA;;;;;;AACA,IAAMA,MAAM,GAAG,SAAf;AACA,IAAMC,OAAO,GAAG,UAAhB;;AAEO,IAAMC,OAAO;AAAA,2FAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,IADa,GACJD,GAAG,CAACE,OADA,CACbD,IADa;AAAA;AAAA,mBAGfE,uBAAWJ,OAAX,CAAmB;AACvBK,cAAAA,YAAY,EAAEH,IAAI,CAACG,YADI;AAEvBC,cAAAA,MAAM,EAAEJ,IAAI,CAACI;AAFU,aAAnB,CAHe;;AAAA;AAAA,6CAQd;AACLR,cAAAA,MAAM,EAAE,SADH;AAELC,cAAAA,OAAO,EAAE;AAFJ,aARc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPC,OAAO;AAAA;AAAA;AAAA,GAAb;;;;AAcA,IAAMO,SAAS;AAAA,4FAAG,kBAAON,GAAP,EAAYO,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfN,YAAAA,IADe,GACND,GAAG,CAACE,OADE,CACfD,IADe;;AAAA,gBAGlBA,IAAI,CAACO,GAHa;AAAA;AAAA;AAAA;;AAAA,8CAIdC,GAAG,CAACZ,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqB;AAC1Bb,cAAAA,MAAM,EAAE,OADkB;AAE1BC,cAAAA,OAAO,EAAE,kBAFiB;AAG1Ba,cAAAA,MAAM,EAAE;AACNH,gBAAAA,GAAG,EAAE,CAAC,iBAAD;AADC;AAHkB,aAArB,CAJc;;AAAA;AAAA;AAAA,mBAaDI,gBAAIC,KAAJ,GACnBC,OADmB,CACX;AACPV,cAAAA,YAAY,EAAEH,IAAI,CAACG,YADZ;AAEPC,cAAAA,MAAM,EAAEJ,IAAI,CAACI;AAFN,aADW,WAKb;AAAA,qBAAM,KAAN;AAAA,aALa,CAbC;;AAAA;AAajBU,YAAAA,OAbiB;;AAoBvB,gBAAI,CAACA,OAAL,EAAc;AACZf,cAAAA,GAAG,SAAH,CAAU,GAAV,EAAe,qCAAf;AACD;;AAtBsB,iCAwBcgB,uBAAWC,MAAX,CAAkBF,OAAO,CAACG,SAA1B,CAxBd,EAwBfrB,MAxBe,sBAwBfA,MAxBe,EAwBPC,OAxBO,sBAwBPA,OAxBO,EAwBEqB,OAxBF,sBAwBEA,OAxBF;;AA0BvB,gBAAI,CAACtB,MAAL,EAAa;AACXG,cAAAA,GAAG,SAAH,CAAU,GAAV,mBAAyBF,OAAzB;AACD;;AAED,gBAAIqB,OAAO,CAACX,GAAR,KAAgBP,IAAI,CAACO,GAAzB,EAA8B;AAC5BR,cAAAA,GAAG,SAAH,CAAU,GAAV,EAAe,aAAf;AACD;;AAhCsB,8CAkChBO,IAAI,EAlCY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATD,SAAS;AAAA;AAAA;AAAA,GAAf;;;;AAqCA,IAAMc,MAAM;AAAA,4FAAG,kBAAMpB,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZI,YAAAA,YADY,GACKJ,GAAG,CAACE,OAAJ,CAAYD,IADjB,CACZG,YADY;AAAA;AAAA,mBAGCiB,iBAAKR,KAAL,GAClBC,OADkB,CACV;AACPV,cAAAA,YAAY,EAAZA;AADO,aADU,WAKZ;AAAA,qBAAM,KAAN;AAAA,aALY,CAHD;;AAAA;AAGhBkB,YAAAA,QAHgB;;AAAA,gBAUfA,QAVe;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWK,qCAAmBlB,YAAnB,CAXL;;AAAA;AAWZmB,YAAAA,QAXY;AAAA;AAahB1B,cAAAA,MAAM,EAANA,MAbgB;AAchBC,cAAAA,OAAO,EAAPA;AAdgB,eAebyB,QAfa;AAgBhBC,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAEH,QAAQ,CAACG;AAAjB,eAAhB;AAhBS;;AAAA;AAAA;AAAA,mBAoBDL,iBAAKR,KAAL,GAAac,iBAAb,CAA+BL,QAAQ,CAACM,EAAxC,EAA4C;AAC3DC,cAAAA,MAAM,EAAE;AADmD,aAA5C,CApBC;;AAAA;AAoBlBP,YAAAA,QApBkB;AAAA;AAwBhBzB,cAAAA,MAAM,EAANA,MAxBgB;AAyBhBC,cAAAA,OAAO,EAAPA;AAzBgB,eA0BbwB,QA1Ba;AA2BhBE,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAEJ;AAAR,eAAhB;AA3BS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANF,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAgCA,IAAMU,MAAM;AAAA,4FAAG,kBAAM9B,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,IADY,GACHD,GAAG,CAACE,OADD,CACZD,IADY;AAEZyB,YAAAA,IAFY,GAEH1B,GAAG,CAAC+B,KAAJ,CAAUL,IAFP,CAEZA,IAFY;AAAA;AAAA,mBAIG,uCAAqBzB,IAArB,EAA2ByB,IAA3B,CAJH;;AAAA;AAIdH,YAAAA,QAJc;AAAA;AAOlB1B,cAAAA,MAAM,EAAE,SAPU;AAQlBC,cAAAA,OAAO,EAAE;AARS,eASfyB,QATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANO,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAaA,IAAME,iBAAiB;AAAA,4FAAG,kBAAMhC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,IADuB,GACdD,GAAG,CAACE,OADU,CACvBD,IADuB;AAEvB2B,YAAAA,EAFuB,GAEhB5B,GAAG,CAAC+B,KAAJ,CAAUL,IAAV,CAAeA,IAFC,CAEvBE,EAFuB;AAAA;AAAA,mBAGZP,iBAAKR,KAAL,GAChBC,OADgB,CACR;AAAEc,cAAAA,EAAE,EAAFA;AAAF,aADQ,WAEV,YAAM;AACX,oBAAM,2BAAa,gCAAb,CAAN;AACD,aAJgB,CAHY;;AAAA;AAGzBF,YAAAA,IAHyB;AAAA;AAAA,mBASRO,yBAAYpB,KAAZ,GACpBqB,MADoB;AAEnBC,cAAAA,OAAO,EAAET,IAAI,CAACE;AAFK,eAGhB3B,IAHgB,YAKd,YAAM;AACX,oBAAM,kCAAoB,cAApB,CAAN;AACD,aAPoB,CATQ;;AAAA;AASzBsB,YAAAA,QATyB;AAAA;AAmB7B1B,cAAAA,MAAM,EAAE,SAnBqB;AAoB7BC,cAAAA,OAAO,EAAE;AApBoB,eAqB1ByB,QArB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBS,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAyBP;;;;;AACO,IAAMI,eAAe;AAAA,4FAAG,kBAAMpC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,IADqB,GACZD,GAAG,CAACE,OADQ,CACrBD,IADqB;AAErBoC,YAAAA,IAFqB,GAEZrC,GAAG,CAAC+B,KAAJ,CAAUL,IAAV,CAAeA,IAFH,CAErBW,IAFqB;AAAA;AAAA,mBAInB,+BAAaA,IAAb,CAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAKvBpC,IAAI,CAACqC,QALkB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMH,8BAAgBrC,IAAI,CAACqC,QAArB,CANG;;AAAA;AAMzBrC,YAAAA,IAAI,CAACqC,QANoB;;AAAA;AAAA;AAAA,mBAQHjB,iBAAKR,KAAL,GAAac,iBAAb,CAA+B1B,IAAI,CAACkC,OAApC,EAA6ClC,IAA7C,CARG;;AAAA;AAQrBsC,YAAAA,SARqB;AAAA;AAWzB1C,cAAAA,MAAM,EAAE,SAXiB;AAYzBC,cAAAA,OAAO,EAAE;AAZgB,eAatByC,SAbsB;;AAAA;AAAA,kBAgBrB,2BAAa,cAAb,CAhBqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfH,eAAe;AAAA;AAAA;AAAA,GAArB,C,CAoBP;;;;;AACO,IAAMI,oBAAoB;AAAA,4FAAG,kBAAMxC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,YAAAA,IAD0B,GACjBD,GAAG,CAACE,OADa,CAC1BD,IAD0B;AAE1BoC,YAAAA,IAF0B,GAEjBrC,GAAG,CAAC+B,KAAJ,CAAUL,IAAV,CAAeA,IAFE,CAE1BW,IAF0B;AAAA;AAAA,mBAIxB,wCAAsBA,IAAtB,CAJwB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKhCpC,YAAAA,IAAI,CAACoC,IAAL,GAAY,WAAZ;AACApC,YAAAA,IAAI,CAAC4B,MAAL,GAAc,KAAd;AANgC;AAAA,mBAOV,8BAAgB5B,IAAI,CAACqC,QAArB,CAPU;;AAAA;AAOhCrC,YAAAA,IAAI,CAACqC,QAP2B;AAAA;AAAA,mBAQRjB,iBAAKR,KAAL,GAAaqB,MAAb,CAAoBjC,IAApB,CARQ;;AAAA;AAQ1BsC,YAAAA,SAR0B;AAAA;AAU9B1C,cAAAA,MAAM,EAAE,SAVsB;AAW9BC,cAAAA,OAAO,EAAE;AAXqB,eAY3ByC,SAZ2B;;AAAA;AAAA,kBAe1B,2BAAa,cAAb,CAf0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBC,oBAAoB;AAAA;AAAA;AAAA,GAA1B,C,CAmBP;;;;;AACO,IAAMC,mBAAmB;AAAA,4FAAG,kBAAMzC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,YAAAA,IADyB,GAChBD,GAAG,CAACE,OADY,CACzBD,IADyB;AAGjCA,YAAAA,IAAI,CAACoC,IAAL,GAAY,WAAZ;AACApC,YAAAA,IAAI,CAAC4B,MAAL,GAAc,IAAd;AAJiC;AAAA,mBAKX,8BAAgB5B,IAAI,CAACqC,QAArB,CALW;;AAAA;AAKjCrC,YAAAA,IAAI,CAACqC,QAL4B;AAAA;AAAA,mBAMTjB,iBAAKR,KAAL,GAAaqB,MAAb,CAAoBjC,IAApB,CANS;;AAAA;AAM3BsC,YAAAA,SAN2B;AAAA;AAAA,mBAO3B,sCAAoBA,SAApB,CAP2B;;AAAA;AAAA;AAS/B1C,cAAAA,MAAM,EAAE,SATuB;AAU/BC,cAAAA,OAAO,EAAE;AAVsB,eAW5ByC,SAX4B;AAY/Bf,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAEa;AAAR,eAAhB;AAZwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBE,mBAAmB;AAAA;AAAA;AAAA,GAAzB,C,CAgBP;;;;;AACO,IAAMC,wBAAwB;AAAA,4FAAG,kBAAM1C,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BC,YAAAA,IAD8B,GACrBD,GAAG,CAACE,OADiB,CAC9BD,IAD8B;AAGtCA,YAAAA,IAAI,CAACoC,IAAL,GAAY,iBAAZ;AACApC,YAAAA,IAAI,CAAC4B,MAAL,GAAc,IAAd;AAJsC;AAAA,mBAKhB,8BAAgB5B,IAAI,CAACqC,QAArB,CALgB;;AAAA;AAKtCrC,YAAAA,IAAI,CAACqC,QALiC;AAAA;AAAA,mBAMdjB,iBAAKR,KAAL,GAAaqB,MAAb,CAAoBjC,IAApB,CANc;;AAAA;AAMhCsC,YAAAA,SANgC;AAAA;AAAA,mBAOhC,sCAAoBA,SAApB,CAPgC;;AAAA;AAAA;AASpC1C,cAAAA,MAAM,EAAE,SAT4B;AAUpCC,cAAAA,OAAO,EAAE;AAV2B,eAWjCyC,SAXiC;AAYpCf,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAEa;AAAR,eAAhB;AAZ6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxBG,wBAAwB;AAAA;AAAA;AAAA,GAA9B;;;;AAgBA,IAAMC,aAAa;AAAA,6FAAG,mBAAM3C,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBqC,YAAAA,IADmB,GACVrC,GAAG,CAAC+B,KAAJ,CAAUL,IAAV,CAAeA,IADL,CACnBW,IADmB;AAAA;AAAA,mBAGjB,+BAAaA,IAAb,CAHiB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAINhB,iBAAKR,KAAL,EAJM;;AAAA;AAInB+B,YAAAA,IAJmB;AAAA,+CAKlB;AACL/C,cAAAA,MAAM,EAAE,SADH;AAELC,cAAAA,OAAO,EAAE,6BAFJ;AAGL8C,cAAAA,IAAI,EAAJA;AAHK,aALkB;;AAAA;AAAA,kBAWnB,2BAAa,cAAb,CAXmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbD,aAAa;AAAA;AAAA;AAAA,GAAnB;;;;AAeA,IAAME,iBAAiB;AAAA,6FAAG,mBAAM7C,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBqC,YAAAA,IADuB,GACdrC,GAAG,CAAC+B,KAAJ,CAAUL,IAAV,CAAeA,IADD,CACvBW,IADuB;AAAA;AAAA,mBAGrB,+BAAaA,IAAb,CAHqB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIVS,iBAAKjC,KAAL,EAJU;;AAAA;AAIvB+B,YAAAA,IAJuB;AAAA,+CAKtB;AACL/C,cAAAA,MAAM,EAAE,SADH;AAELC,cAAAA,OAAO,EAAE,mBAFJ;AAGL8C,cAAAA,IAAI,EAAJA;AAHK,aALsB;;AAAA;AAAA,kBAWvB,2BAAa,cAAb,CAXuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBC,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;;;AAeA,IAAME,KAAK;AAAA,6FAAG,mBAAM/C,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,IADW,GACFD,GAAG,CAACE,OADF,CACXD,IADW;AAAA;AAAA,mBAGAoB,iBAAKR,KAAL,GAChBC,OADgB,CACR;AACPkC,cAAAA,KAAK,EAAE/C,IAAI,CAAC+C;AADL,aADQ,WAIV,YAAM;AACX,oBAAM,2BAAa,gCAAb,CAAN;AACD,aANgB,CAHA;;AAAA;AAGbtB,YAAAA,IAHa;AAAA;AAAA,mBAWGuB,qBAAOC,OAAP,CAAejD,IAAI,CAACqC,QAApB,EAA8BZ,IAAI,CAACY,QAAnC,CAXH;;AAAA;AAWba,YAAAA,OAXa;;AAAA,gBAadA,OAbc;AAAA;AAAA;AAAA;;AAAA,kBAcX,2BAAa,gCAAb,CAdW;;AAAA;AAAA,gBAiBdzB,IAAI,CAACG,MAjBS;AAAA;AAAA;AAAA;;AAAA;AAmBfhC,cAAAA,MAAM,EAANA,MAnBe;AAoBfC,cAAAA,OAAO,EACL;AArBa,eAsBZ4B,IAtBY;;AAAA;AAAA;AA0Bf7B,cAAAA,MAAM,EAANA,MA1Be;AA2BfC,cAAAA,OAAO,EAAPA;AA3Be,eA4BZ4B,IA5BY;AA6BfF,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAJA;AAAF,eAAhB;AA7BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALqB,KAAK;AAAA;AAAA;AAAA,GAAX;;;;AAkCA,IAAMK,cAAc;AAAA,6FAAG,mBAAMpD,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,YAAAA,IADoB,GACXD,GAAG,CAACE,OADO,CACpBD,IADoB;AAAA;AAAA,mBAGToB,iBAAKR,KAAL,GAChBC,OADgB,CACR;AACPkC,cAAAA,KAAK,EAAE/C,IAAI,CAAC+C;AADL,aADQ,WAKV,YAAM;AACX,oBAAM,2BAAa,gCAAb,CAAN;AACD,aAPgB,CAHS;;AAAA;AAGtBtB,YAAAA,IAHsB;AAAA;AAAA,mBAYNuB,qBAAOC,OAAP,CAAejD,IAAI,CAACqC,QAApB,EAA8BZ,IAAI,CAACY,QAAnC,CAZM;;AAAA;AAYtBa,YAAAA,OAZsB;;AAAA,gBAcvBA,OAduB;AAAA;AAAA;AAAA;;AAAA,kBAepB,2BAAa,gCAAb,CAfoB;;AAAA;AAAA,gBAkBvBzB,IAAI,CAACG,MAlBkB;AAAA;AAAA;AAAA;;AAAA;AAoBxBhC,cAAAA,MAAM,EAANA,MApBwB;AAqBxBC,cAAAA,OAAO,EACL;AAtBsB,eAuBrB4B,IAvBqB;;AAAA;AAAA;AAAA,mBA0BhB,mCAAiBA,IAAI,CAACW,IAAtB,CA1BgB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA4BtBxC,cAAAA,MAAM,EAANA,MA5BsB;AA6BtBC,cAAAA,OAAO,EAAPA;AA7BsB,eA8BnB4B,IA9BmB;AA+BtBF,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAJA;AAAF,eAAhB;AA/Be;;AAAA;AAAA,kBAkClB,2BAAa,cAAb,CAlCkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAd0B,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AAuCA,IAAMC,mBAAmB;AAAA,6FAAG,mBAAMrD,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,YAAAA,IADyB,GAChBD,GAAG,CAACE,OADY,CACzBD,IADyB;AAAA;AAAA,mBAGdoB,iBAAKR,KAAL,GAChBC,OADgB,CACR;AACPkC,cAAAA,KAAK,EAAE/C,IAAI,CAAC+C;AADL,aADQ,WAKV,YAAM;AACX,oBAAM,2BAAa,gCAAb,CAAN;AACD,aAPgB,CAHc;;AAAA;AAG3BtB,YAAAA,IAH2B;AAAA;AAAA,mBAYXuB,qBAAOC,OAAP,CAAejD,IAAI,CAACqC,QAApB,EAA8BZ,IAAI,CAACY,QAAnC,CAZW;;AAAA;AAY3Ba,YAAAA,OAZ2B;;AAAA,gBAc5BA,OAd4B;AAAA;AAAA;AAAA;;AAAA,kBAezB,2BAAa,gCAAb,CAfyB;;AAAA;AAAA,gBAkB5BzB,IAAI,CAACG,MAlBuB;AAAA;AAAA;AAAA;;AAAA;AAoB7BhC,cAAAA,MAAM,EAANA,MApB6B;AAqB7BC,cAAAA,OAAO,EACL;AAtB2B,eAuB1B4B,IAvB0B;;AAAA;AAAA;AAAA,mBA0BrB,wCAAsBA,IAAI,CAACW,IAA3B,CA1BqB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA4B3BxC,cAAAA,MAAM,EAANA,MA5B2B;AA6B3BC,cAAAA,OAAO,EAAPA;AA7B2B,eA8BxB4B,IA9BwB;AA+B3BF,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAJA;AAAF,eAAhB;AA/BoB;;AAAA;AAAA,kBAkCvB,2BAAa,cAAb,CAlCuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnB2B,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;;;AAuCA,IAAMC,UAAU;AAAA,6FAAG,mBAAMtD,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,IADgB,GACPD,GAAG,CAACE,OADG,CAChBD,IADgB;AAExBA,YAAAA,IAAI,CAAC4B,MAAL,GAAc,IAAd;AAFwB;AAAA,mBAGAR,iBAAKR,KAAL,GAAac,iBAAb,CAA+B1B,IAAI,CAACkC,OAApC,EAA6ClC,IAA7C,CAHA;;AAAA;AAGlBsC,YAAAA,SAHkB;AAAA;AAMtB1C,cAAAA,MAAM,EAANA,MANsB;AAOtBC,cAAAA,OAAO,EAAPA;AAPsB,eAQnByC,SARmB;AAStBf,cAAAA,KAAK,EAAER,uBAAWS,IAAX,CAAgB;AAAEC,gBAAAA,IAAI,EAAJA;AAAF,eAAhB;AATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV4B,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;AAaA,IAAMC,YAAY;AAAA,6FAAG,mBAAMvD,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,IADkB,GACTD,GAAG,CAACE,OADK,CAClBD,IADkB;AAAA;AAAA,mBAGPoB,iBAAKR,KAAL,GAChBC,OADgB,CACR;AACP0C,cAAAA,QAAQ,EAAEvD,IAAI,CAACuD;AADR,aADQ,WAIV;AAAA,qBAAM,KAAN;AAAA,aAJU,CAHO;;AAAA;AAGpB9B,YAAAA,IAHoB;;AAAA,gBASrBA,IATqB;AAAA;AAAA;AAAA;;AAAA;AAWtB7B,cAAAA,MAAM,EAANA,MAXsB;AAYtBC,cAAAA,OAAO,EAAE;AAZa,eAanB4B,IAbmB;;AAAA;AAAA,kBAgBlB,kCAAoB,wBAApB,CAhBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZ6B,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AAoBA,IAAME,EAAE;AAAA,6FAAG,mBAAMzD,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACR0B,YAAAA,IADQ,GACC1B,GAAG,CAAC+B,KAAJ,CAAUL,IADX,CACRA,IADQ;AAAA;AAAA,mBAGQL,iBAAKR,KAAL,GACrBC,OADqB,CACb;AACPc,cAAAA,EAAE,EAAEF,IAAI,CAACE;AADF,aADa,EAIrB8B,gBAJqB,CAKpB,kCALoB,WAOf,UAACC,CAAD,EAAO;AAACC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe,qBAAO,KAAP;AAAc,aAPtB,CAHR;;AAAA;AAGVpB,YAAAA,SAHU;;AAAA,gBAYXA,SAZW;AAAA;AAAA;AAAA;;AAAA,kBAaR,2BAAa,gCAAb,CAbQ;;AAAA;AAAA;AAgBZ1C,cAAAA,MAAM,EAANA,MAhBY;AAiBZC,cAAAA,OAAO,EAAE;AAjBG,eAkBTyC,SAlBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAFkB,EAAE;AAAA;AAAA;AAAA,GAAR","sourcesContent":["import User from '../models/user'\nimport Role from '../models/role'\nimport FreeDelivery from '../models/free_delivery'\nimport UserSetting from '../models/user_setting'\nimport ReferralCode from '../models/referral_code'\nimport JwtService from '../services/JwtService'\nimport OtpService from '../services/OtpService'\nimport Otp from '../models/otp'\nimport bcrypt from 'bcryptjs'\nimport crypto from 'crypto'\nimport {\n  newCustomerService,\n  updateNewUserService,\n  createUserSubTables\n} from '../services/UserService'\nimport {\n  checkIfAdmin,\n  checkIfMarketingAdmin,\n  checkIfMarketing,\n  checkIfLogisticsAdmin\n} from '../services/RoleService'\nimport {\n  Unauthorized,\n  insidePolygon,\n  makeCode,\n  encryptPassword,\n  UnprocessableEntity\n} from '../helpers'\nimport DeviceToken from '../models/device_token'\nconst status = 'success'\nconst message = 'Success!'\n\nexport const sendOtp = async ctx => {\n  const { body } = ctx.request\n\n  await OtpService.sendOtp({\n    phone_number: body.phone_number,\n    action: body.action\n  })\n\n  return {\n    status: 'success',\n    message: 'Otp sent successfully'\n  }\n}\n\nexport const verifyOtp = async (ctx, next) => {\n  const { body } = ctx.request\n\n  if (!body.otp) {\n    return res.status(400).json({\n      status: 'error',\n      message: 'Validation Error',\n      errors: {\n        otp: ['otp is required']\n      }\n    })\n  }\n\n  const otpInDb = await Otp.query()\n    .findOne({\n      phone_number: body.phone_number,\n      action: body.action\n    })\n    .catch(() => false)\n\n  if (!otpInDb) {\n    ctx.throw(404, 'no otp has been sent to this number')\n  }\n\n  const { status, message, decoded } = JwtService.verify(otpInDb.otp_token)\n\n  if (!status) {\n    ctx.throw(400, `otp is ${message}`)\n  }\n\n  if (decoded.otp !== body.otp) {\n    ctx.throw(400, 'Invalid otp')\n  }\n\n  return next()\n}\n\nexport const create = async ctx => {\n  const { phone_number } = ctx.request.body\n\n  let userInDb = await User.query()\n    .findOne({\n      phone_number\n    })\n\n    .catch(() => false)\n\n  if (!userInDb) {\n    const userData = await newCustomerService(phone_number)\n    return {\n      status,\n      message,\n      ...userData,\n      token: JwtService.sign({ user: userData.user })\n    }\n  } else {\n    // set user to active\n    userInDb = await User.query().patchAndFetchById(userInDb.id, {\n      active: true\n    })\n    return {\n      status,\n      message,\n      ...userInDb,\n      token: JwtService.sign({ user: userInDb })\n    }\n  }\n}\n\nexport const update = async ctx => {\n  const { body } = ctx.request\n  const { user } = ctx.state.user\n\n  const userData = await updateNewUserService(body, user)\n\n  return {\n    status: 'success',\n    message: 'Update Successful',\n    ...userData\n  }\n}\n\nexport const updateDeviceToken = async ctx => {\n  const { body } = ctx.request\n  const { id } = ctx.state.user.user\n  const user = await User.query()\n    .findOne({ id })\n    .catch(() => {\n      throw Unauthorized('User not found please register')\n    })\n\n  const userData = await DeviceToken.query()\n    .insert({\n      user_id: user.id,\n      ...body\n    })\n    .catch(() => {\n      throw UnprocessableEntity('Invalid body')\n    })\n\n  return {\n    status: 'success',\n    message: 'Device Token Update Successful',\n    ...userData\n  }\n}\n\n//admin\nexport const adminUpdateUser = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfAdmin(role)) {\n    if (body.password) {\n      body.password = await encryptPassword(body.password)\n    }\n    const user_data = await User.query().patchAndFetchById(body.user_id, body)\n\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...user_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\n//marketing admin\nexport const marketingCreateStaff = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketingAdmin(role)) {\n    body.role = 'MARKETING'\n    body.active = false\n    body.password = await encryptPassword(body.password)\n    const user_data = await User.query().insert(body)\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...user_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\n//register as marketing\nexport const registerAsMarketing = async ctx => {\n  const { body } = ctx.request\n\n  body.role = 'MARKETING'\n  body.active = true\n  body.password = await encryptPassword(body.password)\n  const user_data = await User.query().insert(body)\n  await createUserSubTables(user_data)\n  return {\n    status: 'success',\n    message: 'Registration Successful',\n    ...user_data,\n    token: JwtService.sign({ user: user_data })\n  }\n}\n\n//register as logistics admin\nexport const registerAsLogisticsAdmin = async ctx => {\n  const { body } = ctx.request\n\n  body.role = 'LOGISTICS_ADMIN'\n  body.active = true\n  body.password = await encryptPassword(body.password)\n  const user_data = await User.query().insert(body)\n  await createUserSubTables(user_data)\n  return {\n    status: 'success',\n    message: 'Registration Successful',\n    ...user_data,\n    token: JwtService.sign({ user: user_data })\n  }\n}\n\nexport const adminGetUsers = async ctx => {\n  const { role } = ctx.state.user.user\n\n  if (await checkIfAdmin(role)) {\n    const data = await User.query()\n    return {\n      status: 'success',\n      message: 'Users returned Successfully',\n      data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const adminGetUserRoles = async ctx => {\n  const { role } = ctx.state.user.user\n\n  if (await checkIfAdmin(role)) {\n    const data = await Role.query()\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const login = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      email: body.email\n    })\n    .catch(() => {\n      throw Unauthorized('User not found. Please sign up')\n    })\n\n  const isValid = await bcrypt.compare(body.password, user.password)\n\n  if (!isValid) {\n    throw Unauthorized('Unauthorized, invalid password')\n  }\n\n  if (!user.active) {\n    return {\n      status,\n      message:\n        'User account inactive, please verify your phone number to continue',\n      ...user\n    }\n  } else {\n    return {\n      status,\n      message,\n      ...user,\n      token: JwtService.sign({ user })\n    }\n  }\n}\n\nexport const loginMarketing = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      email: body.email\n    })\n\n    .catch(() => {\n      throw Unauthorized('User not found. Please sign up')\n    })\n\n  const isValid = await bcrypt.compare(body.password, user.password)\n\n  if (!isValid) {\n    throw Unauthorized('Unauthorized, invalid password')\n  }\n\n  if (!user.active) {\n    return {\n      status,\n      message:\n        'User account inactive, please verify your phone number to continue',\n      ...user\n    }\n  } else {\n    if (await checkIfMarketing(user.role)) {\n      return {\n        status,\n        message,\n        ...user,\n        token: JwtService.sign({ user })\n      }\n    } else {\n      throw Unauthorized('Unauthorized')\n    }\n  }\n}\n\nexport const loginLogisticsAdmin = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      email: body.email\n    })\n\n    .catch(() => {\n      throw Unauthorized('User not found. Please sign up')\n    })\n\n  const isValid = await bcrypt.compare(body.password, user.password)\n\n  if (!isValid) {\n    throw Unauthorized('Unauthorized, invalid password')\n  }\n\n  if (!user.active) {\n    return {\n      status,\n      message:\n        'User account inactive, please verify your phone number to continue',\n      ...user\n    }\n  } else {\n    if (await checkIfLogisticsAdmin(user.role)) {\n      return {\n        status,\n        message,\n        ...user,\n        token: JwtService.sign({ user })\n      }\n    } else {\n      throw Unauthorized('Unauthorized')\n    }\n  }\n}\n\nexport const verifyUser = async ctx => {\n  const { body } = ctx.request\n  body.active = true\n  const user_data = await User.query().patchAndFetchById(body.user_id, body)\n\n  return {\n    status,\n    message,\n    ...user_data,\n    token: JwtService.sign({ user })\n  }\n}\n\nexport const findUserName = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      username: body.username\n    })\n    .catch(() => false)\n\n  if (!user) {\n    return {\n      status,\n      message: 'Username available',\n      ...user\n    }\n  } else {\n    throw UnprocessableEntity('Username not available')\n  }\n}\n\nexport const me = async ctx => {\n  const { user } = ctx.state.user\n\n  const user_data = await User.query()\n    .findOne({\n      id: user.id\n    })\n    .withGraphFetched(\n      '[free_deliveries, referral_code]'\n    )\n    .catch((e) => {console.log(e);return false;})\n\n  if (!user_data) {\n    throw Unauthorized('User not found. Please sign up')\n  } else {\n    return {\n      status,\n      message: 'User data gotten successfully',\n      ...user_data\n    }\n  }\n}\n"],"file":"auth.controller.js"}