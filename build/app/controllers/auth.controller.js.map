{"version":3,"sources":["../../../src/app/controllers/auth.controller.js"],"names":["status","message","sendOtp","ctx","body","request","OtpService","phone_number","action","verifyOtp","next","otp","res","json","errors","Otp","query","where","otpInDb","JwtService","verify","otp_token","decoded","create","User","withGraphFetched","userInDb","userData","token","sign","user","update","personal_details","id","state","Unauthorized","adminUpdateUser","role","name","password","encryptPassword","patchAndFetchById","user_id","user_data","marketingCreateStaff","Role","find","marketing","role_id","active","insert","adminGetUsers","data","adminGetUserRoles","login","findOne","email","bcrypt","compare","isValid","verifyUser"],"mappings":"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","sourcesContent":["import User from '../models/user';\nimport Role from '../models/role';\nimport JwtService from '../services/JwtService';\nimport OtpService from '../services/OtpService';\nimport Otp from '../models/otp'\nimport bcrypt from 'bcryptjs'\nimport crypto from 'crypto'\nimport {newCustomerService,updateNewUserService} from '../services/UserService'\nimport {\n  checkIfAdmin,\n  checkIfMarketingAdmin\n} from '../services/RoleService'\n\nconst status =  'success';\nconst message = 'Success!';\n\nexport const sendOtp = async ctx => {\n  const { body } = ctx.request\n\n    await OtpService.sendOtp({\n      phone_number: body.phone_number,\n      action: body.action,\n    });\n\n    return {\n      status: 'success',\n      message: 'Otp sent successfully',\n    };\n  }\n\n  export const verifyOtp = async (ctx,next) => {\n    const { body } = ctx.request\n\n    if (!body.otp) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'Validation Error',\n        errors: {\n          otp: ['otp is required'],\n        },\n      });\n    }\n\n    const otpInDb = await Otp.query().where({\n      phone_number: body.phone_number,\n      action: body.action,\n    }).catch(() => false\n    );\n\n    if (otpInDb) {\n      ctx.throw(404,'NOT FOUND', {errors: {\n        phone_number: ['no otp has been sent to this number'],\n      }, });\n    }\n\n    const { status, message, decoded } = JwtService.verify(otpInDb.otp_token);\n\n    if (!status) {\n\n      ctx.throw(400, `otp is ${message}`);\n    }\n\n    if (decoded.otp !== body.otp) {\n      return {\n        status: 'error',\n        message: 'Invalid otp',\n      };\n    }\n    \n    return next();\n  }\n\n  export const create = async ctx => {\n    const {\n      phone_number,\n    } = ctx.request.body\n\n\n\n    const userInDb = await User.query().where({\n      phone_number,\n    }).withGraphFetched('[role]').catch(() => false\n    );\n\n    if (!userInDb) {\n      const userData = await newCustomerService(\n        phone_number,\n      )\n      return {\n        status,\n        message,\n        ...userData,\n        token: JwtService.sign(\n          { user: userData.user},\n        )\n      }\n    }else{\n      return {\n      status,\n      message,\n      ...userInDb,\n      token: JwtService.sign(\n        {  ...userData.user},\n      )\n    }\n    }\n  }\n\n  export const update = async ctx => {\n    const {\n      personal_details,\n    } = ctx.request.body\n    const { id } = ctx.state.user\n  \n    const [user] = await User.query()\n      .where({ id })\n      .catch(() => {\n        throw Unauthorized('User not found please register')\n      })\n  \n    const userData = await updateNewUserService(\n      personal_details,\n      user\n    )\n  \n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...userData\n    }\n  }\n\n\n  //admin\n  export const adminUpdateUser = async ctx => {\n    const { body } = ctx.request\n    const { role } = ctx.state.user\n  \n    if (checkIfAdmin(role.name)) {\n      if(body.password){\n        body.password = await encryptPassword(body.password)\n      }\n      const user_data = await User.query().patchAndFetchById(\n        body.user_id,\n        body\n      ).withGraphFetched('[role]')\n      return {\n        status: 'success',\n        message: 'Update Successful',\n        ...user_data\n      }\n    } else {\n      throw Unauthorized('Unauthorized')\n    }\n  }\n\n    //marketing admin\n    export const marketingCreateStaff = async ctx => {\n      const { body } = ctx.request\n      const { role } = ctx.state.user\n    \n      if (checkIfMarketingAdmin(role.name)) {\n        const marketing = await Role.query().find({\n          name:'MARKETING',\n        });\n        body.role_id = marketing.role_id\n        body.active = false\n      body.password = await encryptPassword(body.password)\n        const user_data = await User.query().insert(\n          body\n        ).withGraphFetched('[role]')\n        return {\n          status: 'success',\n          message: 'Update Successful',\n          ...user_data\n        }\n      } else {\n        throw Unauthorized('Unauthorized')\n      }\n    }\n\n  export const adminGetUsers = async ctx => {\n    const { role } = ctx.state.user\n  \n    if (checkIfAdmin(role.name)) {\n    \n      const data = await User.query().withGraphFetched('[role]')\n      return {\n        status: 'success',\n        message: 'Users returned Successfully',\n        data\n      }\n    } else {\n      throw Unauthorized('Unauthorized')\n    }\n  }\n\n  export const adminGetUserRoles = async ctx => {\n    const { role } = ctx.state.user\n  \n    if (checkIfAdmin(role.name)) {\n    \n      const data = await Role.query()\n      return {\n        status: 'success',\n        message: 'Update Successful',\n        data\n      }\n    } else {\n      throw Unauthorized('Unauthorized')\n    }\n  }\n\n  export const login = async ctx => {\n    const { body } = ctx.request\n  \n    const user = await User.query()\n      .findOne({\n        email: body.email\n      })\n      .catch(() => {\n        throw Unauthorized('User not found. Please sign up')\n      })\n  \n    const isValid = await bcrypt.compare(body.password, user.password)\n  \n    if (!isValid) {\n      throw Unauthorized('Unauthorized, invalid password')\n    }\n  \n    if (!user.active) {\n      return {\n        status,\n        message:'User account inactive, please verify your phone number to continue',\n        ...user,\n      }\n    }else{\n      return {\n        status,\n        message,\n        ...user,\n        token: JwtService.sign(\n          {  ...user},\n        )\n      }\n    }\n  }\n\n  export const verifyUser = async ctx => {\n    const {body} = ctx.request\n    body.active = true\n    const user_data = await User.query().patchAndFetchById(\n      body.user_id,\n      body\n    ).withGraphFetched('[role]')\n    return {\n      status,\n      message,\n      ...user_data,\n      token: JwtService.sign(\n        {  ...user},)\n    }\n\n    \n  }\n\n\n\n"],"file":"auth.controller.js"}