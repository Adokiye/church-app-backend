{"version":3,"sources":["../../../src/app/controllers/auth.controller.js"],"names":["status","message","sendOtp","ctx","body","request","OtpService","phone_number","action","verifyOtp","next","otp","res","json","errors","Otp","query","findOne","otpInDb","JwtService","verify","otp_token","decoded","create","User","userInDb","userData","token","sign","user","patchAndFetchById","id","active","update","state","adminUpdateUser","role","password","encryptPassword","user_id","user_data","marketingCreateStaff","insert","adminGetUsers","data","adminGetUserRoles","Role","login","email","bcrypt","compare","isValid","loginMarketing","loginLogisticsAdmin","verifyUser"],"mappings":"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","sourcesContent":["import User from '../models/user'\nimport Role from '../models/role'\nimport JwtService from '../services/JwtService'\nimport OtpService from '../services/OtpService'\nimport Otp from '../models/otp'\nimport bcrypt from 'bcryptjs'\nimport crypto from 'crypto'\nimport {\n  newCustomerService,\n  updateNewUserService\n} from '../services/UserService'\nimport { checkIfAdmin, checkIfMarketingAdmin, checkIfMarketing, checkIfLogisticsAdmin } from '../services/RoleService'\nimport { Unauthorized, insidePolygon } from '../helpers'\nconst status = 'success'\nconst message = 'Success!'\n\nexport const sendOtp = async ctx => {\n  const { body } = ctx.request\n\n  await OtpService.sendOtp({\n    phone_number: body.phone_number,\n    action: body.action\n  })\n\n  return {\n    status: 'success',\n    message: 'Otp sent successfully'\n  }\n}\n\nexport const verifyOtp = async (ctx, next) => {\n  const { body } = ctx.request\n\n  if (!body.otp) {\n    return res.status(400).json({\n      status: 'error',\n      message: 'Validation Error',\n      errors: {\n        otp: ['otp is required']\n      }\n    })\n  }\n\n  const otpInDb = await Otp.query()\n    .findOne({\n      phone_number: body.phone_number,\n      action: body.action\n    })\n    .catch(() => false)\n\n  if (!otpInDb) {\n    ctx.throw(404, 'no otp has been sent to this number', )\n  }\n\n  const { status, message, decoded } = JwtService.verify(otpInDb.otp_token)\n\n  if (!status) {\n    ctx.throw(400, `otp is ${message}`)\n  }\n\n  if (decoded.otp !== body.otp) {\n    ctx.throw(400, 'Invalid otp')\n  }\n\n  return next()\n}\n\nexport const create = async ctx => {\n  const { phone_number } = ctx.request.body\n\n  let userInDb = await User.query()\n    .findOne({\n      phone_number\n    })\n    \n    .catch(() => false)\n\n  if (!userInDb) {\n    const userData = await newCustomerService(phone_number)\n    return {\n      status,\n      message,\n      ...userData,\n      token: JwtService.sign({ user: userData.user })\n    }\n  } else {\n    // set user to active\n   userInDb = await User.query()\n    .patchAndFetchById(userInDb.id, {\n      active:true\n    })\n    return {\n      status,\n      message,\n      ...userInDb,\n      token: JwtService.sign({ user: userInDb })\n    }\n  }\n}\n\nexport const update = async ctx => {\n  const { body } = ctx.request\n  const { id } = ctx.state.user.user\n  const user = await User.query()\n    .findOne({ id })\n    .catch(() => {\n      throw Unauthorized('User not found please register')\n    })\n\n  const userData = await updateNewUserService(body, user)\n\n  return {\n    status: 'success',\n    message: 'Update Successful',\n    ...userData\n  }\n}\n\n//admin\nexport const adminUpdateUser = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (checkIfAdmin(role)) {\n    if (body.password) {\n      body.password = await encryptPassword(body.password)\n    }\n    const user_data = await User.query()\n      .patchAndFetchById(body.user_id, body)\n      \n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...user_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\n//marketing admin\nexport const marketingCreateStaff = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (checkIfMarketingAdmin(role)) {\n    body.role = 'MARKETING'\n    body.active = false\n    body.password = await encryptPassword(body.password)\n    const user_data = await User.query().insert(body)\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...user_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const adminGetUsers = async ctx => {\n  const { role } = ctx.state.user.user\n\n  if (checkIfAdmin(role)) {\n    const data = await User.query()\n    return {\n      status: 'success',\n      message: 'Users returned Successfully',\n      data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const adminGetUserRoles = async ctx => {\n  const { role } = ctx.state.user.user\n\n  if (checkIfAdmin(role)) {\n    const data = await Role.query()\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const login = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      email: body.email\n    })\n    .catch(() => {\n      throw Unauthorized('User not found. Please sign up')\n    })\n\n  const isValid = await bcrypt.compare(body.password, user.password)\n\n  if (!isValid) {\n    throw Unauthorized('Unauthorized, invalid password')\n  }\n\n  if (!user.active) {\n    return {\n      status,\n      message:\n        'User account inactive, please verify your phone number to continue',\n      ...user\n    }\n  } else {\n    return {\n      status,\n      message,\n      ...user,\n      token: JwtService.sign({ ...user })\n    }\n  }\n}\n\nexport const loginMarketing = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      email: body.email\n    })\n    \n    .catch(() => {\n      throw Unauthorized('User not found. Please sign up')\n    })\n\n  const isValid = await bcrypt.compare(body.password, user.password)\n\n  if (!isValid) {\n    throw Unauthorized('Unauthorized, invalid password')\n  }\n\n  if (!user.active) {\n    return {\n      status,\n      message:\n        'User account inactive, please verify your phone number to continue',\n      ...user\n    }\n  } else {\n    if (checkIfMarketing(user.role)) {\n      return {\n        status,\n        message,\n        ...user,\n        token: JwtService.sign({ ...user })\n      }\n    } else {\n      throw Unauthorized('Unauthorized')\n    }\n\n  }\n}\n\nexport const loginLogisticsAdmin = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      email: body.email\n    })\n    \n    .catch(() => {\n      throw Unauthorized('User not found. Please sign up')\n    })\n\n  const isValid = await bcrypt.compare(body.password, user.password)\n\n  if (!isValid) {\n    throw Unauthorized('Unauthorized, invalid password')\n  }\n\n  if (!user.active) {\n    return {\n      status,\n      message:\n        'User account inactive, please verify your phone number to continue',\n      ...user\n    }\n  } else {\n    if (checkIfLogisticsAdmin(user.role)) {\n      return {\n        status,\n        message,\n        ...user,\n        token: JwtService.sign({ ...user })\n      }\n    } else {\n      throw Unauthorized('Unauthorized')\n    }\n\n  }\n}\n\nexport const verifyUser = async ctx => {\n  const { body } = ctx.request\n  body.active = true\n  const user_data = await User.query()\n    .patchAndFetchById(body.user_id, body)\n    \n  return {\n    status,\n    message,\n    ...user_data,\n    token: JwtService.sign({ ...user })\n  }\n}\n"],"file":"auth.controller.js"}