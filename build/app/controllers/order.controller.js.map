{"version":3,"sources":["../../../src/app/controllers/order.controller.js"],"names":["getOrderTypes","ctx","order_types","OrderType","query","status","message","data","calculateOrder","body","request","discount_code","cokitchen_polygon_id","meals","address","dealInDb","id","Array","prototype","sum","prop","total","i","_len","length","service_charge","Deal","where","withGraphFetched","res","json","errors","CokitchenPolygon","cokitchenPolygonInDb","len","selected_meals","total_meal_amount","Meal","mealInDb","addons","addons_len","j","Addon","addonInDb","quantity","total_amount","amount","push","addon","brand_found","x","brand","Number","meal","deal_type","name","min","rate","delivery_fee","CalculatedOrder","insert","deal_id","calculated_order","createOrder","Promise","all","order_type_id","calculated_order_id","Repository","Account","getAccountByAccountNumber","userTag","orderTypeInDb","calculatedOrderInDb","order_type"],"mappings":"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","sourcesContent":["import Cokitchen from '../models/cokitchen'\nimport OrderType from '../models/order_type'\nimport Order from '../models/order'\nimport Meal from '../models/meal'\nimport Addon from '../models/addons'\nimport DealType from '../models/deal_type'\nimport Deal from '../models/deal'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport CalculatedOrder from '../models/calculated_order'\nimport { checkIfAdmin } from '../services/RoleService'\nimport { Unauthorized, encryptPassword } from '../helpers'\n\nexport const getOrderTypes = async ctx => {\n  const order_types = OrderType.query()\n  return {\n    status: 'success',\n    message: 'Successful',\n    data: order_types\n  }\n}\n\nexport const calculateOrder = async ctx => {\n  const { body } = ctx.request\n  // initialize the body variables\n  let discount_code = body.discount_code\n  let cokitchen_polygon_id = body.cokitchen_polygon_id\n  let meals = body.meals\n  let address = body.address\n  let dealInDb = {id:''}\n\n  Array.prototype.sum = function (prop) {\n    var total = 0\n    for (var i = 0, _len = this.length; i < _len; i++) {\n      total += this[i][prop]\n    }\n    return total\n  }\n  // make service charge 0 at first in case the order is greater than 1999\n  let service_charge = 0\n  // calculate the order based on each body value\n  //1- get deal from the db based on the request if discount code exists\n  if (discount_code) {\n    dealInDb = await Deal.query()\n      .where({\n        discount_code: discount_code\n      })\n      .withGraphFetched(\n        '[brand, deal_type, deal_requirement_type, deal_eligibility_type, deal_value_type]'\n      )\n      .catch(() => false)\n    if (!dealInDb) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          discount_code: [`deal not found for discount code:${discount_code}`]\n        }\n      })\n    }\n  }\n\n  //2- get the users cokitchen polygon\n  let cokitchenPolygonInDb = await CokitchenPolygon.query()\n    .where({\n      id: cokitchen_polygon_id\n    })\n    .catch(() => false)\n  if (!cokitchenPolygonInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        cokitchen_polygon_id: [\n          `cokitchen_polygon not found for id:${cokitchen_polygon_id}`\n        ]\n      }\n    })\n  }\n  //step 3- get all meals and addons from the db based on the request\n  var i = 0,\n    len = meals.length\n  let selected_meals = []\n  let total_meal_amount = 0\n  while (i < len) {\n    let mealInDb = await Meal.query()\n      .where({\n        id: meals[i].id\n      })\n      .withGraphFetched('[brand]')\n      .catch(() => false)\n    if (mealInDb) {\n      let addons = []\n      if (meals[i].addons.length > 0) {\n        let addons_len = meals[i].addons.length\n        while (j < addons_len) {\n          let addonInDb = await Addon.query()\n            .where({\n              id: meals[i].addons[j].id\n            })\n            .catch(() => false)\n          if (addonInDb) {\n            addonInDb.quantity = meals[i].addons[j].quantity\n            addonInDb.total_amount =\n              meals[i].addons[j].quantity * addonInDb.amount\n            addons.push(addonInDb)\n          } else {\n            return res.status(404).json({\n              status: 'error',\n              message: 'Not Found',\n              errors: {\n                addon: [\n                  `addon not found meal-index:${i}, addon-index:${j} addon-id:${meals[i].addons[j].id}`\n                ]\n              }\n            })\n          }\n          j++\n        }\n      }\n      mealInDb.addons = addons\n      mealInDb.quantity = meals[i].quantity\n      let brand_found = false\n      // find the meals brand and push to that array\n      for (let x = 0; x < selected_meals.length; x++) {\n        if (selected_meals[x].brand.id == mealInDb.brand.id) {\n          selected_meals[x].meals.push(mealInDb)\n          selected_meals[x].amount +=\n            (Number(mealInDb.amount) * mealInDb.quantity)\n            + mealInDb.addons.sum('total_amount')\n          brand_found = true\n          break\n        }\n      }\n      if (!brand_found) {\n        selected_meals.push({\n          brand: mealInDb.brand,\n          meals: [mealInDb],\n          amount:\n            (Number(mealInDb.amount) * mealInDb.quantity) +\n            mealInDb.addons.sum('total_amount')\n        })\n      }\n    } else {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          meal: [`meal not found meal-index:${i} meal-id:${meals[i].id}`]\n        }\n      })\n    }\n    i++\n  }\n\n  // if without deals meals amount is less than 2000, apply service charge\n  if (selected_meals.sum('amount') < 2000) {\n    service_charge = 60\n  }\n  // 4- if deal exists , apply deal to amount\n  if (discount_code) {\n    if (dealInDb.deal_type.name == 'BRAND') {\n      for (let i = 0; i < selected_meals.length; i++) {\n        //check if deals minimum amount is less than meals total amount\n        if (\n          selected_meals[x].brand.id == dealInDb.brand.id &&\n          dealInDb.min < selected_meals[x].amount\n        ) {\n          //apply deal\n          selected_meals[x].amount -= selected_meals[x].amount * dealInDb.rate\n          break\n        }\n      }\n      total_meal_amount += selected_meals.sum('amount')\n    } else {\n      total_meal_amount += selected_meals.sum('amount')\n      if (dealInDb.min < total_meal_amount) {\n        //apply deal\n        total_meal_amount -= total_meal_amount * dealInDb.rate\n      }\n    }\n  } else {\n    total_meal_amount += selected_meals.sum('amount')\n  }\n  //5- service fee is applicable to orders of price less than NGN2000\n  total_meal_amount += total_meal_amount + service_charge\n\n  //6 - add polygon delivery fee\n  total_meal_amount += Number(cokitchenPolygonInDb.delivery_fee)\n\n  const calculated_order = await CalculatedOrder.query().insert({\n    total_amount: total_meal_amount,\n    service_charge,\n    delivery_fee: cokitchenPolygonInDb.delivery_fee,\n    address,\n    meals: selected_meals,\n    cokitchen_polygon_id,\n    deal_id: dealInDb.id\n  })\n\n  return {\n    status: 'success',\n    message: 'order calulated successfully',\n    calculated_order\n  }\n}\n\nexport const createOrder = async ctx => {\n  const { body } = ctx.request\n  let [orderTypeInDb, calculatedOrderInDb] = await Promise.all([\n    OrderType.query()\n      .where({\n        id: body.order_type_id\n      })\n      .catch(() => false),\n    CalculatedOrder.query()\n      .where({\n        id: body.calculated_order_id\n      })\n      .catch(() => false),\n    Repository.Account.getAccountByAccountNumber(userTag)\n  ])\n  if (!orderTypeInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        order_type: ['order type not found']\n      }\n    })\n  }\n  if (!calculatedOrderInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        calculated_order: ['calculated order not found']\n      }\n    })\n  }\n\n  switch (orderTypeInDb.name) {\n    case 'WALLET':\n      break\n    case 'CARD':\n      // code block\n      break\n    case 'CASH':\n      // code block\n      break\n    default:\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          order_type: ['order type not found']\n        }\n      })\n  }\n}\n"],"file":"order.controller.js"}