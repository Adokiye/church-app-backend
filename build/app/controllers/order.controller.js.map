{"version":3,"sources":["../../../src/app/controllers/order.controller.js"],"names":["getOrderTypes","ctx","order_types","OrderType","query","status","message","data","calculateOrder","body","request","Array","prototype","sum","prop","total","i","_len","length","service_charge","deal","Deal","where","id","withGraphFetched","dealInDb","res","json","errors","cokitchen_polygon","CokitchenPolygon","cokitchenPolygonInDb","len","meal_details","meals","total_meal_amount","Meal","meal_id","mealInDb","addons","addons_len","j","Addon","addon_id","addonInDb","qty","addon_qty","total_amount","amount","push","addon","meal_qty","brand_found","x","brand","Number","meal","deaL","deal_type","name","min","rate","delivery_fee","CalculatedOrder","insert","calculated_order","createOrder","Promise","all","order_type_id","calculated_order_id","Repository","Account","getAccountByAccountNumber","userTag","orderTypeInDb","calculatedOrderInDb","order_type"],"mappings":"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","sourcesContent":["import Cokitchen from '../models/cokitchen'\nimport OrderType from '../models/order_type'\nimport Order from '../models/order'\nimport Meal from '../models/meal'\nimport Addon from '../models/addons'\nimport DealType from '../models/deal_type'\nimport Deal from '../models/deal'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport CalculatedOrder from '../models/calculated_order'\nimport { checkIfAdmin } from '../services/RoleService'\nimport { Unauthorized, encryptPassword } from '../helpers'\n\nexport const getOrderTypes = async ctx => {\n  const order_types = OrderType.query()\n  return {\n    status: 'success',\n    message: 'Successful',\n    data: order_types\n  }\n}\n\nexport const calculateOrder = async ctx => {\n  const { body } = ctx.request\n\n  Array.prototype.sum = function (prop) {\n    var total = 0\n    for (var i = 0, _len = this.length; i < _len; i++) {\n      total += this[i][prop]\n    }\n    return total\n  }\n  let service_charge = 0\n  //1- get deal from the db based on the request\n  if (body.deal) {\n    let deal = body.deal\n    let dealInDb = await Deal.query()\n      .where({\n        id: deal\n      })\n      .withGraphFetched('[brand, deal_type]')\n      .catch(() => false)\n    if (!dealInDb) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal: [`deal not found id:${deal}`]\n        }\n      })\n    }\n  }\n\n  //2- get the users cokitchen polygon\n  let cokitchen_polygon = body.cokitchen_polygon\n  let cokitchenPolygonInDb = await CokitchenPolygon.query()\n    .where({\n      id: cokitchen_polygon\n    })\n    .catch(() => false)\n  if (!cokitchenPolygonInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        cokitchen_polygon: [\n          `cokitchen_polygon not found id:${cokitchen_polygon}`\n        ]\n      }\n    })\n  }\n  //step 3- get all meals and addons from the db based on the request\n  var i = 0,\n    len = body.meal_details.length\n  let meals = []\n  let total_meal_amount = 0\n  while (i < len) {\n    let mealInDb = await Meal.query()\n      .where({\n        id: body.meal_details[i].meal_id\n      })\n      .withGraphFetched('[brand]')\n      .catch(() => false)\n    if (mealInDb) {\n      let addons = []\n      if (body.meal_details[i].addons.length > 0) {\n        let addons_len = body.meal_details[i].addons.length\n        while (j < addons_len) {\n          let addonInDb = await Addon.query()\n            .where({\n              id: body.meal_details[i].addons[j].addon_id\n            })\n            .catch(() => false)\n          if (addonInDb) {\n            addonInDb.qty = body.meal_details[i].addons[j].addon_qty\n            addonInDb.total_amount =\n              body.meal_details[i].addons[j].addon_qty * addonInDb.amount\n            addons.push(addonInDb)\n          } else {\n            return res.status(404).json({\n              status: 'error',\n              message: 'Not Found',\n              errors: {\n                addon: [\n                  `addon not found meal-index:${i}, addon-index:${j} addon-id:${body.meal_details[i].addons[j].addon_id}`\n                ]\n              }\n            })\n          }\n          j++\n        }\n      }\n      mealInDb.addons = addons\n      mealInDb.qty = body.meal_details[i].meal_qty\n      let brand_found = false\n      // find the meals brand and push to that array\n      for (let x = 0; x < meals.length; x++) {\n        if (meals[x].brand.id == mealInDb.brand.id) {\n          meals[x].meals.push(mealInDb)\n          meals[x].amount += Number(mealInDb.amount) * Number(mealInDb.qty)\n          brand_found = true\n          break\n        }\n      }\n      if (!brand_found) {\n        meals.push({\n          brand: mealInDb.brand,\n          meals: [mealInDb],\n          amount:\n            Number(mealInDb.amount) * Number(mealInDb.qty) +\n            mealInDb.addons.sum('total_amount')\n        })\n      }\n    } else {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          meal: [\n            `meal not found meal-index:${i} meal-id:${body.meal_details[i].meal_id}`\n          ]\n        }\n      })\n    }\n    i++\n  }\n\n  // if without deals meals amount is less than 2000, apply service charge\n  if (meals.sum('amount') < 2000) {\n    service_charge = 0.05\n  }\n  // 4- if deal exists , apply deal to amount\n  if (body.deaL) {\n    if (dealInDb.deal_type.name == 'BRAND') {\n      for (let i = 0; i < meals.length; i++) {\n        //check if deals minimum amount is less than meals total amount\n        if (\n          meals[x].brand.id == dealInDb.brand.id &&\n          dealInDb.min < meals[x].amount\n        ) {\n          //apply deal\n          meals[x].amount -= meals[x].amount * dealInDb.rate\n          break\n        }\n      }\n      total_meal_amount += meals.sum('amount')\n    } else {\n      total_meal_amount += meals.sum('amount')\n      if (dealInDb.min < total_meal_amount) {\n        //apply deal\n        total_meal_amount -= total_meal_amount * dealInDb.rate\n      }\n    }\n  } else {\n    total_meal_amount += meals.sum('amount')\n  }\n  //5- service fee is applicable to orders of price less than NGN2000\n  total_meal_amount += total_meal_amount * service_charge\n\n  //6 - add polygon delivery fee\n  total_meal_amount += Number(cokitchenPolygonInDb.delivery_fee)\n\n  const calculated_order = await CalculatedOrder.query().insert({\n    total_amount: total_meal_amount,\n    service_charge,\n    delivery_fee: cokitchenPolygonInDb.delivery_fee\n  })\n\n  return {\n    status: 'success',\n    message: 'order calulated successfully',\n    calculated_order\n  }\n}\n\nexport const createOrder = async ctx => {\n  const { body } = ctx.request\n  let [orderTypeInDb, calculatedOrderInDb] = await Promise.all([\n    OrderType.query()\n      .where({\n        id: body.order_type_id\n      })\n      .catch(() => false),\n    CalculatedOrder.query()\n      .where({\n        id: body.calculated_order_id\n      })\n      .catch(() => false),\n    Repository.Account.getAccountByAccountNumber(userTag)\n  ])\n  if (!orderTypeInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        order_type: ['order type not found']\n      }\n    })\n  }\n  if (!calculatedOrderInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        calculated_order: ['calculated order not found']\n      }\n    })\n  }\n\n  switch (orderTypeInDb.name) {\n    case 'WALLET':\n      break\n    case 'CARD':\n      // code block\n      break\n    case 'CASH':\n      // code block\n      break\n    default:\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          order_type: ['order type not found']\n        }\n      })\n  }\n}\n"],"file":"order.controller.js"}