{"version":3,"sources":["../../../src/app/controllers/order.controller.js"],"names":["getOrderTypes","ctx","order_types","OrderType","query","status","message","data","calculateOrder","body","request","discount_code","cokitchen_polygon_id","meals","address","lat","lng","dealInDb","id","Array","prototype","sum","prop","total","i","_len","length","service_charge","Deal","where","withGraphFetched","CokitchenPolygon","cokitchenPolygonInDb","len","selected_meals","total_meal_amount","Meal","mealInDb","addons","addons_len","j","Addon","addonInDb","quantity","total_amount","amount","push","brand_found","x","brand","Number","deal_type","name","min","rate","delivery_fee","CalculatedOrder","insert","deal_id","e","calculated_order","createOrder","order_details","JSON","stringify","use_wallet","Promise","all","findById","order_type_id","console","log","NotFound","calculated_order_id","orderTypeInDb","calculatedOrderInDb","Order","order"],"mappings":"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","sourcesContent":["import Cokitchen from '../models/cokitchen'\nimport OrderType from '../models/order_type'\nimport Order from '../models/order'\nimport Meal from '../models/meal'\nimport User from '../models/user'\nimport Addon from '../models/addons'\nimport DealType from '../models/deal_type'\nimport Deal from '../models/deal'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport CalculatedOrder from '../models/calculated_order'\nimport { checkIfAdmin } from '../services/RoleService'\nimport { Unauthorized, encryptPassword, UnprocessableEntity, setPendingOrder } from '../helpers'\n\nexport const getOrderTypes = async ctx => {\n  const order_types = OrderType.query()\n  return {\n    status: 'success',\n    message: 'Successful',\n    data: order_types\n  }\n}\n\nexport const calculateOrder = async ctx => {\n  const { body } = ctx.request\n  // initialize the body variables\n  let discount_code = body.discount_code\n  let cokitchen_polygon_id = body.cokitchen_polygon_id\n  let meals = body.meals\n  let address = body.address\n  let lat = body.lat\n  let lng = body.lng\n  let dealInDb = { id: '' }\n\n  Array.prototype.sum = function (prop) {\n    var total = 0\n    for (var i = 0, _len = this.length; i < _len; i++) {\n      total += this[i][prop]\n    }\n    return total\n  }\n  // make service charge 0 at first in case the order is greater than 1999\n  let service_charge = 0\n  // calculate the order based on each body value\n  //1- get deal from the db based on the request if discount code exists\n  if (discount_code) {\n    dealInDb = await Deal.query()\n      .where({\n        discount_code: discount_code\n      })\n      .withGraphFetched(\n        '[brand, deal_type, deal_requirement_type, deal_eligibility_type, deal_value_type]'\n      )\n      .catch(() => false)\n    if (!dealInDb) {\n      throw UnprocessableEntity(\n        `deal not found for discount code:${discount_code}`\n      )\n    }\n  }\n\n  //2- get the users cokitchen polygon\n  let cokitchenPolygonInDb = await CokitchenPolygon.query()\n    .where({\n      id: cokitchen_polygon_id\n    })\n    .catch(() => false)\n  if (!cokitchenPolygonInDb) {\n    throw UnprocessableEntity(\n      `cokitchen_polygon not found for id:${cokitchen_polygon_id}`\n    )\n  }\n  //step 3- get all meals and addons from the db based on the request\n  var i = 0,\n    len = meals.length\n  let selected_meals = []\n  let total_meal_amount = 0\n  while (i < len) {\n    let mealInDb = await Meal.query()\n      .where({\n        id: meals[i].id\n      })\n      .withGraphFetched('[brand]')\n      .catch(() => false)\n    if (mealInDb) {\n      let addons = []\n      if (meals[i].addons.length > 0) {\n        let addons_len = meals[i].addons.length\n        while (j < addons_len) {\n          let addonInDb = await Addon.query()\n            .where({\n              id: meals[i].addons[j].id\n            })\n            .catch(() => false)\n          if (addonInDb) {\n            addonInDb.quantity = meals[i].addons[j].quantity\n            addonInDb.total_amount =\n              meals[i].addons[j].quantity * addonInDb.amount\n            addons.push(addonInDb)\n          } else {\n            throw UnprocessableEntity(\n              `addon not found meal-index:${i}, addon-index:${j} addon-id:${meals[i].addons[j].id}`\n            )\n          }\n          j++\n        }\n      }\n      mealInDb.addons = addons\n      mealInDb.quantity = meals[i].quantity\n      let brand_found = false\n      // find the meals brand and push to that array\n      for (let x = 0; x < selected_meals.length; x++) {\n        if (selected_meals[x].brand.id == mealInDb.brand.id) {\n          selected_meals[x].meals.push(mealInDb)\n          selected_meals[x].amount +=\n            Number(mealInDb.amount) * mealInDb.quantity +\n            mealInDb.addons.sum('total_amount')\n          brand_found = true\n          break\n        }\n      }\n      if (!brand_found) {\n        selected_meals.push({\n          brand: mealInDb.brand,\n          meals: [mealInDb],\n          amount:\n            Number(mealInDb.amount) * mealInDb.quantity +\n            mealInDb.addons.sum('total_amount')\n        })\n      }\n    } else {\n      throw UnprocessableEntity(\n        `meal not found meal-index:${i} meal-id:${meals[i].id}`\n      )\n    }\n    i++\n  }\n\n  // if without deals meals amount is less than 2000, apply service charge\n  if (selected_meals.sum('amount') < 2000) {\n    service_charge = 60\n  }\n  // 4- if deal exists , apply deal to amount\n  if (discount_code) {\n    if (dealInDb.deal_type.name == 'BRAND') {\n      for (let i = 0; i < selected_meals.length; i++) {\n        //check if deals minimum amount is less than meals total amount\n        if (\n          selected_meals[x].brand.id == dealInDb.brand.id &&\n          dealInDb.min < selected_meals[x].amount\n        ) {\n          //apply deal\n          selected_meals[x].amount -= selected_meals[x].amount * dealInDb.rate\n          break\n        }\n      }\n      total_meal_amount += selected_meals.sum('amount')\n    } else {\n      total_meal_amount += selected_meals.sum('amount')\n      if (dealInDb.min < total_meal_amount) {\n        //apply deal\n        total_meal_amount -= total_meal_amount * dealInDb.rate\n      }\n    }\n  } else {\n    total_meal_amount += selected_meals.sum('amount')\n  }\n  //5- service fee is applicable to orders of price less than NGN2000\n  total_meal_amount += total_meal_amount + service_charge\n\n  //6 - add polygon delivery fee\n  total_meal_amount += Number(cokitchenPolygonInDb.delivery_fee)\n\n  const calculated_order = await CalculatedOrder.query()\n    .insert({\n      total_amount: total_meal_amount,\n      service_charge,\n      delivery_fee: cokitchenPolygonInDb.delivery_fee,\n      address,\n      meals: selected_meals,\n      cokitchen_polygon_id,\n      deal_id: dealInDb.id,\n      lat,\n      lng\n    })\n    .catch(e => {\n      throw UnprocessableEntity('Invalid Body')\n    })\n\n  return {\n    status: 'success',\n    message: 'order calulated successfully',\n    calculated_order\n  }\n}\n\nexport const createOrder = async ctx => {\n  const { body } = ctx.request\n  order_details = JSON.stringify([])\n  if(body.order_details){\n   order_details = JSON.stringify(body.order_details)\n  }\n  let use_wallet = false\n  if(body.use_wallet){\n    use_wallet = true\n  }\n  let [orderTypeInDb, calculatedOrderInDb] = await Promise.all([\n    OrderType.query()\n      .findById(body.order_type_id)\n      .catch((e) => {\n        console.log(e);\n        throw NotFound('Order type not found')\n      }),\n    CalculatedOrder.query()\n      .findById(body.calculated_order_id)\n      .catch((e) =>  {\n        console.log(e);\n        throw NotFound('Calculated order not found')\n      }),\n  ])\n  let order\n  switch (orderTypeInDb.name) {\n    case 'WALLET':\n      break\n    case 'CARD':\n      // code block\n      break\n    case 'CASH':\n      order = await Order.query().\n      insert({\n        order_details,\n        order_type_id:orderTypeInDb.id,\n        calculated_order_id:calculatedOrderInDb.id\n      }).catch((e)=>{\n        console.log(e)\n        throw UnprocessableEntity('Invalid order body')\n      })\n      break\n    default:\n      throw NotFound('Not found')\n  }\n  await setPendingOrder(order)\n\n  return {\n    status: 'success',\n    message: 'order created successfully',\n    order\n  }\n}\n"],"file":"order.controller.js"}