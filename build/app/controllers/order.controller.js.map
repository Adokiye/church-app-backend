{"version":3,"sources":["../../../src/app/controllers/order.controller.js"],"names":["getOrderTypes","ctx","order_types","OrderType","query","status","message","data","calculateOrder","body","request","Array","prototype","sum","prop","total","i","_len","length","service_charge","deal","Deal","where","id","withGraphFetched","dealInDb","res","json","errors","cokitchen_polygon","CokitchenPolygon","cokitchenPolygonInDb","len","meal_details","meals","total_meal_amount","Meal","meal_id","mealInDb","addons","addons_len","j","Addon","addon_id","addonInDb","qty","addon_qty","total_amount","amount","push","addon","meal_qty","brand_found","x","brand","Number","meal","deaL","deal_type","name","min","rate","delivery_fee","CalculatedOrder","insert","calculated_order","createOrder","Promise","all","order_type_id","calculated_order_id","Repository","Account","getAccountByAccountNumber","userTag","orderTypeInDb","calculatedOrderInDb","order_type"],"mappings":"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","sourcesContent":["import Cokitchen from '../models/cokitchen'\nimport OrderType from '../models/order_type'\nimport Order from '../models/order'\nimport Meal from '../models/meal'\nimport Addon from '../models/addon'\nimport DealType from '../models/deal_type'\nimport Deal from '../models/deal'\nimport CokitchenPolygon from '../models/cokitchen_polygon'\nimport CalculatedOrder from '../models/calculated_order'\nimport { checkIfAdmin } from '../services/RoleService'\nimport { Unauthorized, encryptPassword } from '../helpers'\n\nexport const getOrderTypes = async ctx => {\n  const order_types = OrderType.query()\n  return {\n    status: 'success',\n    message: 'Successful',\n    data: order_types\n  }\n}\n\nexport const calculateOrder = async ctx => {\n  const { body } = ctx.request\n\n  Array.prototype.sum = function (prop) {\n    var total = 0\n    for ( var i = 0, _len = this.length; i < _len; i++ ) {\n        total += this[i][prop]\n    }\n    return total\n}\n  let service_charge = 0\n  //1- get deal from the db based on the request\n  if (body.deal) {\n    let deal = body.deal\n    let dealInDb = await Deal.query()\n      .where({\n        id: deal\n      })\n      .withGraphFetched('[brand, deal_type]').catch(() => false\n      );\n    if (!dealInDb) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal: [`deal not found id:${deal}`]\n        }\n      })\n    }\n  }\n\n  //2- get the users cokitchen polygon\n  let cokitchen_polygon = body.cokitchen_polygon\n  let cokitchenPolygonInDb = await CokitchenPolygon.query().where({\n    id: cokitchen_polygon\n  }).catch(() => false\n  );\n  if (!cokitchenPolygonInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        cokitchen_polygon: [\n          `cokitchen_polygon not found id:${cokitchen_polygon}`\n        ]\n      }\n    })\n  }\n  //step 3- get all meals and addons from the db based on the request\n  var i = 0,\n    len = body.meal_details.length\n  let meals = []\n  let total_meal_amount = 0\n  while (i < len) {\n    let mealInDb = await Meal.query()\n      .where({\n        id: body.meal_details[i].meal_id\n      })\n      .withGraphFetched('[brand]').catch(() => false\n      );\n    if (mealInDb) {\n      let addons = []\n      if (body.meal_details[i].addons.length > 0) {\n        let addons_len = body.meal_details[i].addons.length\n        while (j < addons_len) {\n          let addonInDb = await Addon.query().where({\n            id: body.meal_details[i].addons[j].addon_id\n          }).catch(() => false\n          );\n          if (addonInDb) {\n            addonInDb.qty = body.meal_details[i].addons[j].addon_qty\n            addonInDb.total_amount = body.meal_details[i].addons[j].addon_qty*addonInDb.amount\n            addons.push(addonInDb)\n          } else {\n            return res.status(404).json({\n              status: 'error',\n              message: 'Not Found',\n              errors: {\n                addon: [\n                  `addon not found meal-index:${i}, addon-index:${j} addon-id:${body.meal_details[i].addons[j].addon_id}`\n                ]\n              }\n            })\n          }\n          j++\n        }\n      }\n      mealInDb.addons = addons\n      mealInDb.qty = body.meal_details[i].meal_qty\n      let brand_found = false\n          // find the meals brand and push to that array\n          for(let x=0;x<meals.length;x++){\n              if(meals[x].brand.id == mealInDb.brand.id){\n                  meals[x].meals.push(mealInDb)\n                  meals[x].amount+=(Number(mealInDb.amount)*Number(mealInDb.qty))\n                  brand_found = true;\n                  break;\n              }\n          }\n          if(!brand_found){\n            meals.push({\n                brand:mealInDb.brand,\n                meals:[mealInDb],\n                amount: (Number(mealInDb.amount)*Number(mealInDb.qty))+mealInDb.addons.sum('total_amount')\n            })\n          }\n    } else {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          meal: [\n            `meal not found meal-index:${i} meal-id:${body.meal_details[i].meal_id}`\n          ]\n        }\n      })\n    }\n    i++\n  }\n \n  // if without deals meals amount is less than 2000, apply service charge\n  if(meals.sum('amount')<2000){\n    service_charge = 0.05\n  }\n  // 4- if deal exists , apply deal to amount\n  if(body.deaL){\n      if(dealInDb.deal_type.name == 'BRAND'){\n\n        for(let i=0;i<meals.length;i++){\n            //check if deals minimum amount is less than meals total amount\n            if(meals[x].brand.id == dealInDb.brand.id && dealInDb.min < meals[x].amount){\n                //apply deal\n                meals[x].amount-=(meals[x].amount*dealInDb.rate)\n                break;\n            } \n        }\n      total_meal_amount+=meals.sum('amount')\n      }else{\n      total_meal_amount+=meals.sum('amount')\n      if(dealInDb.min < total_meal_amount){\n          //apply deal\n            total_meal_amount-=(total_meal_amount*dealInDb.rate)\n      }\n      }\n  }else{\n    total_meal_amount+=meals.sum('amount')\n  }\n  //5- service fee is applicable to orders of price less than NGN2000\n  total_meal_amount+=(total_meal_amount*service_charge)\n\n  //6 - add polygon delivery fee\n  total_meal_amount+=(Number(cokitchenPolygonInDb.delivery_fee))\n\n  const calculated_order = await CalculatedOrder.query().insert(\n    {\n       total_amount: total_meal_amount,\n       service_charge,\n       delivery_fee:cokitchenPolygonInDb.delivery_fee\n    }\n  )\n\n  return {\n      status: 'success',\n      message:'order calulated successfully',\n      calculated_order,\n  }\n}\n\nexport const createOrder = async ctx => {\n  const { body } = ctx.request\n  let [orderTypeInDb,\ncalculatedOrderInDb] = await Promise.all([\n    OrderType.query().where({\n        id: body.order_type_id\n      }).catch(() => false\n      ),\n      CalculatedOrder.query().where({\n        id: body.calculated_order_id\n      }).catch(() => false\n      ), \n    Repository.Account.getAccountByAccountNumber(userTag),\n  ]);\n  if (!orderTypeInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        order_type: ['order type not found']\n      }\n    })\n  }\n  if (!calculatedOrderInDb) {\n    return res.status(404).json({\n      status: 'error',\n      message: 'Not Found',\n      errors: {\n        calculated_order: ['calculated order not found']\n      }\n    })\n  }\n\n  switch (orderTypeInDb.name) {\n    case 'WALLET':\n      break\n    case 'CARD':\n      // code block\n      break\n    case 'CASH':\n      // code block\n      break\n    default:\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          order_type: ['order type not found']\n        }\n      })\n  }\n}\n"],"file":"order.controller.js"}