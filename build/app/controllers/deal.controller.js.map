{"version":3,"sources":["../../../src/app/controllers/deal.controller.js"],"names":["createDeal","ctx","body","request","role","state","user","images","JSON","stringify","Promise","all","DealType","query","findById","deal_type_id","e","DealEligibilityType","deal_eligibility_type_id","DealValueType","deal_value_type_id","DealRequirementType","deal_requirement_type_id","deal_type_data","deal_eligibility_type_data","deal_value_type_data","deal_requirement_type_data","res","status","json","message","errors","deal_type","deal_eligibility_type","deal_value_type","deal_requirement_type","name","specific_customers","min_amount","min_items","rate","fixed_amount","brands","deals","i","len","length","Brand","where","id","brand_data","brand_id","cokitchen_id","Deal","insert","console","log","deal_data","push","brand","data","updateDeal","params","patchAndFetchById","withGraphFetched","getDealTypes","deal_types","deal_eligibility_types","deal_value_types","deal_requirement_types","getCokitchenDeals","Cokitchen","cokitchen_with_deals"],"mappings":"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","sourcesContent":["import Brand from '../models/brand'\nimport Deal from '../models/deal'\nimport DealType from '../models/deal_type'\nimport DealEligibilityType from '../models/deal_eligibility_type'\nimport DealRequirementType from '../models/deal_requirement_type'\nimport DealValueType from '../models/deal_value_type'\nimport Cokitchen from '../models/cokitchen'\nimport { checkIfAdmin, checkIfMarketing } from '../services/RoleService'\nimport { NotFound, Unauthorized, UnprocessableEntity } from '../helpers'\n\nexport const createDeal = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n  if (body.images) {\n    body.images = JSON.stringify(body.images)\n  }\n  if (await checkIfMarketing(role)) {\n    const [\n      deal_type_data,\n      deal_eligibility_type_data,\n      deal_value_type_data,\n      deal_requirement_type_data\n    ] = await Promise.all([\n      DealType.query()\n        .findById(body.deal_type_id)\n        .catch(e => false),\n      DealEligibilityType.query()\n        .findById(body.deal_eligibility_type_id)\n        .catch(e => false),\n      DealValueType.query()\n        .findById(body.deal_value_type_id)\n        .catch(e => false),\n      DealRequirementType.query()\n        .findById(body.deal_requirement_type_id)\n        .catch(e => false)\n    ])\n    if (!deal_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_type: ['Deal type not found with that id']\n        }\n      })\n    }\n    if (!deal_eligibility_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_eligibility_type: [\n            'Deal Eligibility type not found with that id'\n          ]\n        }\n      })\n    }\n    if (!deal_value_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_value_type: ['Deal Value type not found with that id']\n        }\n      })\n    }\n    if (!deal_requirement_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_requirement_type: ['Deal Value type not found with that id']\n        }\n      })\n    }\n    if (deal_eligibility_type_data.name === 'SPECIFIC_CUSTOMERS') {\n      if (!body.specific_customers) {\n        throw UnprocessableEntity(\n          'For eligibility type SPECIFIC_CUSTOMERS, specific_customers array is required'\n        )\n      }\n      body.specific_customers = JSON.stringify(body.specific_customers)\n    }\n    switch (deal_requirement_type_data.name) {\n      case 'MINIMUM_PURCHASE_AMOUNT':\n        if (!body.min_amount) {\n          throw UnprocessableEntity(\n            'For requirement type MINIMUM_PURCHASE_AMOUNT, min_amount is required'\n          )\n        }\n        break\n      case 'MINIMUM_QUANTITY_OF_ITEMS':\n        if (!body.min_items) {\n          throw UnprocessableEntity(\n            'For requirement type MINIMUM_QUANTITY_OF_ITEMS, min_items is required'\n          )\n        }\n        break\n    }\n    switch (deal_value_type_data.name) {\n      case 'PERCENTAGE':\n        if (!body.rate) {\n          throw UnprocessableEntity(\n            'For value type PERCENTAGE, rate is required'\n          )\n        }\n        break\n      case 'FIXED_AMOUNT':\n        if (!body.fixed_amount) {\n          throw UnprocessableEntity(\n            'For value type FIXED_AMOUNT, fixed_amount is required'\n          )\n        }\n        break\n    }\n    if (deal_type_data.name === 'BRAND') {\n      if (!body.brands) {\n        throw UnprocessableEntity(\n          'for deal type BRAND, brands array is required'\n        )\n      }\n      const brands = body.brands\n      delete body.brands\n      var deals = []\n      var i = 0,\n        len = brands.length\n      while (i < len) {\n        const brand_data = await Brand.query()\n          .where('id', brands[i].id)\n          .catch(() => false)\n        if (brand_data) {\n          body.brand_id = brand_data[0].id\n          body.cokitchen_id = brand_data[0].cokitchen_id\n          const deal_data = await Deal.query()\n            .insert(body)\n            .catch(e => {\n              console.log(e)\n              throw UnprocessableEntity('Invalid Body')\n            })\n          deals.push(deal_data)\n        } else {\n          return res.status(404).json({\n            status: 'error',\n            message: 'Not Found',\n            errors: {\n              brand: ['Brand not found for id ' + brands[i].id]\n            }\n          })\n        }\n        i++\n      }\n      return {\n        status: 'success',\n        message: 'Deal Creation Successful',\n        data: deals\n      }\n    } else {\n      if (!body.cokitchen_id) {\n        throw UnprocessableEntity('for deal type ALL, cokitchen_id is required')\n      }\n      const deal_data = await Deal.query()\n        .insert(body)\n        .catch(e => {\n          console.log(e)\n          throw UnprocessableEntity('Invalid Body')\n        })\n      return {\n        status: 'success',\n        message: 'Deal Creation Successful',\n        data: deal_data\n      }\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const updateDeal = async ctx => {\n  const { id } = ctx.params\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    if (body.images) {\n      body.images = JSON.stringify(body.images)\n    }\n    const deal_data = await Deal.query()\n      .patchAndFetchById(id, body)\n      .withGraphFetched('[deal_type]')\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...deal_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const getDealTypes = async ctx => {\n  const [\n    deal_types,\n    deal_eligibility_types,\n    deal_value_types,\n    deal_requirement_types\n  ] = await Promise.all([\n    DealType.query().catch(e => []),\n    DealEligibilityType.query().catch(e => []),\n    DealValueType.query().catch(e => []),\n    DealRequirementType.query().catch(e => [])\n  ])\n  return {\n    status: 'success',\n    message: 'Successful',\n    deal_types,\n    deal_eligibility_types,\n    deal_value_types,\n    deal_requirement_types\n  }\n}\n\nexport const getCokitchenDeals = async ctx => {\n  const cokitchen_with_deals = await Cokitchen.query()\n    .withGraphFetched(\n      '[deals.[deal_type, deal_value_type, deal_eligibility_type, deal_requirement_type]]'\n    )\n    .catch(e => {\n      console.log(e)\n      return []\n    })\n  return {\n    status: 'success',\n    message: 'Successful',\n    data: cokitchen_with_deals\n  }\n}\n"],"file":"deal.controller.js"}