{"version":3,"sources":["../../../src/app/controllers/deal.controller.js"],"names":["createDeal","ctx","body","request","role","state","user","DealType","query","findById","deal_type_id","deal_type_data","res","status","json","message","errors","deal_type","name","deals","i","len","brands","length","Brand","brand_data","brand_id","id","Deal","insert","withGraphFetched","deal_data","push","data","updateDeal","params","patchAndFetchById","getDealTypes","deal_types"],"mappings":"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","sourcesContent":["import Brand from '../models/brand'\nimport Deal from '../models/deal'\nimport DealType from '../models/deal_type'\nimport { checkIfAdmin, checkIfMarketing } from '../services/RoleService'\nimport { Unauthorized } from '../helpers'\n\nexport const createDeal = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    const deal_type_data = await DealType.query()\n      .findById(body.deal_type_id)\n      .catch(() => false)\n    if (!deal_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_type: ['Deal type not found with that id']\n        }\n      })\n    }\n    if (deal_type_data.name === 'BRAND') {\n      var deals = []\n      var i = 0,\n        len = body.brands.length\n      while (i < len) {\n        const brand_data = await Brand.query()\n          .findById(body.brands[i])\n          .catch(() => false)\n        if (brand_data) {\n          body.brand_id = brand_data.id\n          const deal_data = await Deal.query()\n            .insert(body)\n            .withGraphFetched('[deal_type]')\n          deals.push(deal_data)\n        } else {\n          return res.status(404).json({\n            status: 'error',\n            message: 'Not Found',\n            errors: {\n              deal_type: ['Brand not found for ' + body.brands[i]]\n            }\n          })\n        }\n        i++\n      }\n      return {\n        status: 'success',\n        message: 'Creation Successful',\n        data: deals\n      }\n    } else {\n      const deal_data = await Deal.query()\n        .insert(body)\n        .withGraphFetched('[deal_type]')\n      return {\n        status: 'success',\n        message: 'Creation Successful',\n        data: deal_data\n      }\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const updateDeal = async ctx => {\n  const { id } = ctx.params\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    const deal_data = await Deal.query()\n      .patchAndFetchById(id, body)\n      .withGraphFetched('[deal_type]')\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...deal_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const getDealTypes = async ctx => {\n  const { role } = ctx.state.user.user\n  if (await checkIfMarketing(role)) {\n    const deal_types = DealType.query()\n    return {\n      status: 'success',\n      message: 'Successful',\n      data: deal_types\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n"],"file":"deal.controller.js"}