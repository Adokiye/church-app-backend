{"version":3,"sources":["../../../src/app/controllers/deal.controller.js"],"names":["createDeal","ctx","body","request","role","state","user","post","images","JSON","stringify","Promise","all","DealType","query","findById","deal_type_id","e","DealEligibilityType","deal_eligibility_type_id","DealValueType","deal_value_type_id","DealRequirementType","deal_requirement_type_id","deal_type_data","deal_eligibility_type_data","deal_value_type_data","deal_requirement_type_data","res","status","json","message","errors","deal_type","deal_eligibility_type","deal_value_type","deal_requirement_type","name","specific_customers","min_amount","min_items","rate","fixed_amount","brands","deals","i","len","length","Brand","where","id","console","log","brand_data","cokitchen_id","Deal","insert","deal_data","data","createPost","updateDeal","params","patchAndFetchById","withGraphFetched","getDealTypes","deal_types","deal_eligibility_types","deal_value_types","deal_requirement_types","getCokitchenDeals","Cokitchen","cokitchen_with_deals","getCokitchenHomePagePosts","cokitchen_home_page_posts","updatePostsArrangement","posts","CokitchenHomePagePost","cokitchen_home_page_post_data"],"mappings":"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","sourcesContent":["import Brand from '../models/brand'\nimport Deal from '../models/deal'\nimport Posts from '../models/posts'\nimport DealType from '../models/deal_type'\nimport DealEligibilityType from '../models/deal_eligibility_type'\nimport DealRequirementType from '../models/deal_requirement_type'\nimport DealValueType from '../models/deal_value_type'\nimport Cokitchen from '../models/cokitchen'\nimport CokitchenHomePagePost from '../models/cokitchen_home_page_post'\nimport { checkIfAdmin, checkIfMarketing } from '../services/RoleService'\nimport { NotFound, Unauthorized, UnprocessableEntity } from '../helpers'\nimport { newPost } from '../services/PostService'\n\nexport const createDeal = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n  let post = false\n  if (body.images) {\n    body.images = JSON.stringify(body.images)\n  }\n  if (body.post) {\n    post = body.post\n    delete body.post\n  }\n  if (await checkIfMarketing(role)) {\n    const [\n      deal_type_data,\n      deal_eligibility_type_data,\n      deal_value_type_data,\n      deal_requirement_type_data\n    ] = await Promise.all([\n      DealType.query()\n        .findById(body.deal_type_id)\n        .catch(e => false),\n      DealEligibilityType.query()\n        .findById(body.deal_eligibility_type_id)\n        .catch(e => false),\n      DealValueType.query()\n        .findById(body.deal_value_type_id)\n        .catch(e => false),\n      DealRequirementType.query()\n        .findById(body.deal_requirement_type_id)\n        .catch(e => false)\n    ])\n    if (!deal_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_type: ['Deal type not found with that id']\n        }\n      })\n    }\n    if (!deal_eligibility_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_eligibility_type: [\n            'Deal Eligibility type not found with that id'\n          ]\n        }\n      })\n    }\n    if (!deal_value_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_value_type: ['Deal Value type not found with that id']\n        }\n      })\n    }\n    if (!deal_requirement_type_data) {\n      return res.status(404).json({\n        status: 'error',\n        message: 'Not Found',\n        errors: {\n          deal_requirement_type: ['Deal Value type not found with that id']\n        }\n      })\n    }\n    if (deal_eligibility_type_data.name === 'SPECIFIC_CUSTOMERS') {\n      if (!body.specific_customers) {\n        throw UnprocessableEntity(\n          'For eligibility type SPECIFIC_CUSTOMERS, specific_customers array is required'\n        )\n      }\n      body.specific_customers = JSON.stringify(body.specific_customers)\n    }\n    switch (deal_requirement_type_data.name) {\n      case 'MINIMUM_PURCHASE_AMOUNT':\n        if (!body.min_amount) {\n          throw UnprocessableEntity(\n            'For requirement type MINIMUM_PURCHASE_AMOUNT, min_amount is required'\n          )\n        }\n        break\n      case 'MINIMUM_QUANTITY_OF_ITEMS':\n        if (!body.min_items) {\n          throw UnprocessableEntity(\n            'For requirement type MINIMUM_QUANTITY_OF_ITEMS, min_items is required'\n          )\n        }\n        break\n    }\n    switch (deal_value_type_data.name) {\n      case 'PERCENTAGE':\n        if (!body.rate) {\n          throw UnprocessableEntity(\n            'For value type PERCENTAGE, rate is required'\n          )\n        }\n        break\n      case 'FIXED_AMOUNT':\n        if (!body.fixed_amount) {\n          throw UnprocessableEntity(\n            'For value type FIXED_AMOUNT, fixed_amount is required'\n          )\n        }\n        break\n    }\n    if (deal_type_data.name === 'BRAND') {\n      if (!body.brands) {\n        throw UnprocessableEntity(\n          'for deal type BRAND, brands array is required'\n        )\n      }\n      const brands = body.brands\n      delete body.brands\n      var deals = []\n      var i = 0,\n        len = brands.length\n      while (i < len) {\n        let brand_data = await Brand.query()\n          .where('id', brands[i].id)\n          .catch(e => {\n            console.log(e)\n            throw UnprocessableEntity('Brand not found for id:' + brands[i].id)\n          })\n        i++\n      }\n      body.cokitchen_id = brands[0].cokitchen_id\n      body.brands = JSON.stringify(body.brands)\n      const deal_data = await Deal.query()\n        .insert(body)\n        .catch(e => {\n          console.log(e)\n          throw UnprocessableEntity('Invalid Body')\n        })\n      if (post) {\n        await newPost(deal_data)\n      }\n      return {\n        status: 'success',\n        message: 'Deal Creation Successful',\n        data: deal_data\n      }\n    } else {\n      if (!body.cokitchen_id) {\n        throw UnprocessableEntity('for deal type ALL, cokitchen_id is required')\n      }\n      const deal_data = await Deal.query()\n        .insert(body)\n        .catch(e => {\n          console.log(e)\n          throw UnprocessableEntity('Invalid Body')\n        })\n      if (post) {\n        await newPost(deal_data)\n      }\n      return {\n        status: 'success',\n        message: 'Deal Creation Successful',\n        data: deal_data\n      }\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const createPost = async ctx => {\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n  if (await checkIfMarketing(role)) {\n    const data = await newPost(body)\n    return {\n      status: 'success',\n      message: 'Post Creation Successful',\n      data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const updateDeal = async ctx => {\n  const { id } = ctx.params\n  const { body } = ctx.request\n  const { role } = ctx.state.user.user\n\n  if (await checkIfMarketing(role)) {\n    if (body.images) {\n      body.images = JSON.stringify(body.images)\n    }\n    const deal_data = await Deal.query()\n      .patchAndFetchById(id, body)\n      .withGraphFetched('[deal_type]')\n    return {\n      status: 'success',\n      message: 'Update Successful',\n      ...deal_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized')\n  }\n}\n\nexport const getDealTypes = async ctx => {\n  const [\n    deal_types,\n    deal_eligibility_types,\n    deal_value_types,\n    deal_requirement_types\n  ] = await Promise.all([\n    DealType.query().catch(e => []),\n    DealEligibilityType.query().catch(e => []),\n    DealValueType.query().catch(e => []),\n    DealRequirementType.query().catch(e => [])\n  ])\n  return {\n    status: 'success',\n    message: 'Successful',\n    deal_types,\n    deal_eligibility_types,\n    deal_value_types,\n    deal_requirement_types\n  }\n}\n\nexport const getCokitchenDeals = async ctx => {\n  const cokitchen_with_deals = await Cokitchen.query()\n    .withGraphFetched(\n      '[deals.[deal_type, deal_value_type, deal_eligibility_type, deal_requirement_type]]'\n    )\n    .catch(e => {\n      console.log(e)\n      return []\n    })\n  return {\n    status: 'success',\n    message: 'Successful',\n    data: cokitchen_with_deals\n  }\n}\n\nexport const getCokitchenHomePagePosts = async ctx => {\n  const cokitchen_home_page_posts = await Cokitchen.query()\n    .withGraphFetched('[cokitchen_home_page_posts]')\n    .catch(e => {\n      console.log(e)\n      return []\n    })\n  return {\n    status: 'success',\n    message: 'Successful',\n    data: cokitchen_home_page_posts\n  }\n}\n\nexport const updatePostsArrangement = async ctx => {\n  const { role } = ctx.state.user.user\n  const { body } = ctx.request\n  if (await checkIfMarketing(role)) {\n    const posts = body.posts\n    let cokitchen_home_page_post_data = await CokitchenHomePagePost.query()\n      .where(cokitchen_id, body.cokitchen_id)\n      .catch(() => {\n        throw NotFound('Cokitchen Post not found')\n      })\n    cokitchen_home_page_post_data[0].posts = posts\n    cokitchen_home_page_post_data[0].posts = JSON.stringify(\n      cokitchen_home_page_post_data[0].posts\n    )\n\n    cokitchen_home_page_post_data = await CokitchenHomePagePost.query().patchAndFetchById(\n      cokitchen_home_page_post_data[0].id,\n      cokitchen_home_page_post_data[0]\n    )\n    return {\n      status: 'success',\n      message: 'Cokitchen Home page posts arrangement updated Successfully',\n      data: cokitchen_home_page_post_data\n    }\n  } else {\n    throw Unauthorized('Unauthorized Update')\n  }\n}\n"],"file":"deal.controller.js"}