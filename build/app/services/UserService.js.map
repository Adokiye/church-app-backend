{"version":3,"sources":["../../../src/app/services/UserService.js"],"names":["newCustomerService","phone_number","makeCode","length","result","characters","charactersLength","i","charAt","Math","floor","random","Promise","all","User","query","insert","role","active","user","FreeDelivery","user_id","id","UserSetting","ReferralCode","code","toUpperCase","free_delivery","user_setting","referral_code","updateNewUserService","personal_details","password","patchAndFetchById","user_data"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEO,IAAMA,kBAAkB;AAAA,2FAAG,iBAAMC,YAAN;AAAA,uDAUvBC,QAVuB;;AAAA;AAAA;AAAA;AAAA;AAUvBA,YAAAA,QAVuB,sBAUdC,MAVc,EAUN;AACxB,kBAAIC,MAAM,GAAG,EAAb;AACA,kBAAIC,UAAU,GACZ,gEADF;AAEA,kBAAIC,gBAAgB,GAAGD,UAAU,CAACF,MAAlC;;AACA,mBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/BH,gBAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,gBAA3B,CAAlB,CAAV;AACD;;AACD,qBAAOF,MAAP;AACD,aAnB+B;;AAAA;AAAA,mBACXQ,OAAO,CAACC,GAAR,CAAY,CAC/BC,iBAAKC,KAAL,GACGC,MADH,CACU;AACNf,cAAAA,YAAY,EAAZA,YADM;AAENgB,cAAAA,IAAI,EAAE,UAFA;AAGNC,cAAAA,MAAM,EAAE;AAHF,aADV,CAD+B,CAAZ,CADW;;AAAA;AAAA;AAAA;AACzBC,YAAAA,IADyB;AAAA;AAAA,mBAqB2BP,OAAO,CAACC,GAAR,CAAY,CACrEO,0BAAaL,KAAb,GAAqBC,MAArB,CAA4B;AAC1BK,cAAAA,OAAO,EAAEF,IAAI,CAACG;AADY,aAA5B,CADqE,EAIrEC,yBAAYR,KAAZ,GAAoBC,MAApB,CAA2B;AACzBK,cAAAA,OAAO,EAAEF,IAAI,CAACG;AADW,aAA3B,CAJqE,EAOrEE,0BAAaT,KAAb,GAAqBC,MAArB,CAA4B;AAC1BK,cAAAA,OAAO,EAAEF,IAAI,CAACG,EADY;AAE1BG,cAAAA,IAAI,EAAEvB,QAAQ,CAAC,CAAD,CAAR,CAAYwB,WAAZ;AAFoB,aAA5B,CAPqE,CAAZ,CArB3B;;AAAA;AAAA;AAAA;AAqBzBC,YAAAA,aArByB;AAqBVC,YAAAA,YArBU;AAqBIC,YAAAA,aArBJ;AAAA,6CAkCzB;AACLV,cAAAA,IAAI,EAAJA;AADK,aAlCyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBnB,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;;;AAuCA,IAAM8B,oBAAoB;AAAA,4FAAG,kBAAOC,gBAAP,EAAyBZ,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAE9BY,gBAAgB,CAACC,QAFa;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGE,8BAAgBD,gBAAgB,CAACC,QAAjC,CAHF;;AAAA;AAGhCD,YAAAA,gBAAgB,CAACC,QAHe;;AAAA;AAAA;AAAA,mBAKVlB,iBAAKC,KAAL,GACrBkB,iBADqB,CACHd,IAAI,CAACG,EADF,EACMS,gBADN,CALU;;AAAA;AAK5BG,YAAAA,SAL4B;AAAA,8CAS3B;AACLA,cAAAA,SAAS,EAATA;AADK,aAT2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBJ,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;;eAcQ;AACb9B,EAAAA,kBAAkB,EAAlBA,kBADa;AAEb8B,EAAAA,oBAAoB,EAApBA;AAFa,C","sourcesContent":["import { transaction } from 'objection'\n\nimport User from '../models/user'\nimport Role from '../models/role'\nimport FreeDelivery from '../models/free_delivery'\nimport UserSetting from '../models/user_setting'\nimport ReferralCode from '../models/referral_code'\n\nimport { encryptPassword } from '../helpers'\n\nexport const newCustomerService = async phone_number => {\n  const [user] = await Promise.all([\n    User.query()\n      .insert({\n        phone_number,\n        role: 'CUSTOMER',\n        active: true\n      })\n  ])\n\n  function makeCode(length) {\n    var result = ''\n    var characters =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    var charactersLength = characters.length\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n  }\n\n  const [free_delivery, user_setting, referral_code] = await Promise.all([\n    FreeDelivery.query().insert({\n      user_id: user.id\n    }),\n    UserSetting.query().insert({\n      user_id: user.id\n    }),\n    ReferralCode.query().insert({\n      user_id: user.id,\n      code: makeCode(6).toUpperCase()\n    })\n  ])\n\n  return {\n    user\n  }\n}\n\nexport const updateNewUserService = async (personal_details, user) => {\n  //  clean up data\n  if (personal_details.password) {\n    personal_details.password = await encryptPassword(personal_details.password)\n  }\n  const user_data = await User.query()\n    .patchAndFetchById(user.id, personal_details)\n    \n\n  return {\n    user_data\n  }\n}\n\nexport default {\n  newCustomerService,\n  updateNewUserService\n}\n"],"file":"UserService.js"}