{"version":3,"sources":["../../../src/app/services/UserService.js"],"names":["newCustomerService","phone_number","User","Role","query","find","name","customerRole","Promise","all","insert","role_id","id","active","withGraphFetched","user","console","log","FreeDelivery","user_id","free_delivery","updateNewUserService","personal_details","logistics_company_id","password","patchAndFetchById","user_data"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AAEO,IAAMA,kBAAkB;AAAA,2FAAG,kBAAMC,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnB,4BAAYC,gBAAZ;AAAA,wGAAkB,iBAAMA,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACFC,iBAAKC,KAAL,GAAaC,IAAb,CAAkB;AAC3CC,0BAAAA,IAAI,EAAE;AADqC,yBAAlB,CADE;;AAAA;AACvBC,wBAAAA,YADuB;AAAA;AAAA,+BAIRC,OAAO,CAACC,GAAR,CAAY,CAC/BP,IAAI,CAACE,KAAL,GACGM,MADH,CACU;AACNT,0BAAAA,YAAY,EAAZA,YADM;AAENU,0BAAAA,OAAO,EAAEJ,YAAY,CAACK,EAFhB;AAGNC,0BAAAA,MAAM,EAAE;AAHF,yBADV,EAMGC,gBANH,CAMoB,QANpB,CAD+B,CAAZ,CAJQ;;AAAA;AAAA;AAAA;AAItBC,wBAAAA,IAJsB;AAc7BC,wBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAd6B;AAAA,+BAgBDG,0BAAad,KAAb,GAAqBM,MAArB,CAA4B;AACtDS,0BAAAA,OAAO,EAAEJ,IAAI,CAACH;AADwC,yBAA5B,CAhBC;;AAAA;AAgBvBQ,wBAAAA,aAhBuB;AAAA,yDAoBtB;AACLL,0BAAAA,IAAI,EAAJA,IADK;AAELK,0BAAAA,aAAa,EAAbA;AAFK,yBApBsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAlB;;AAAA;AAAA;AAAA;AAAA,gBADmB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBpB,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;;;AA4BA,IAAMqB,oBAAoB;AAAA,4FAAG,kBAAOC,gBAAP,EAAyBP,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACrB,4BAAYb,gBAAZ;AAAA,wGAAkB,kBAAMA,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7B;AACA,+BAAOoB,gBAAgB,CAACrB,YAAxB;AACA,+BAAOqB,gBAAgB,CAACX,OAAxB;AACA,+BAAOW,gBAAgB,CAACC,oBAAxB;AAJ6B;AAAA,+BAKK,8BAAgBD,gBAAgB,CAACE,QAAjC,CALL;;AAAA;AAK7BF,wBAAAA,gBAAgB,CAACE,QALY;AAAA;AAAA,+BAOLtB,IAAI,CAACE,KAAL,GACrBqB,iBADqB,CACHV,IAAI,CAACH,EADF,EACMU,gBADN,EAErBR,gBAFqB,CAEJ,QAFI,CAPK;;AAAA;AAOvBY,wBAAAA,SAPuB;AAAA,0DAWtB;AACLA,0BAAAA,SAAS,EAATA;AADK,yBAXsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAlB;;AAAA;AAAA;AAAA;AAAA,gBADqB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBL,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;;eAkBQ;AACbrB,EAAAA,kBAAkB,EAAlBA,kBADa;AAEbqB,EAAAA,oBAAoB,EAApBA;AAFa,C","sourcesContent":["import { transaction } from 'objection'\n\nimport User from '../models/user'\nimport Role from '../models/role'\nimport FreeDelivery from '../models/free_delivery'\n\nimport { encryptPassword } from '../helpers'\n\nexport const newCustomerService = async phone_number => {\n  return await transaction(User, async User => {\n    const customerRole = await Role.query().find({\n      name: 'CUSTOMER'\n    })\n    const [user] = await Promise.all([\n      User.query()\n        .insert({\n          phone_number,\n          role_id: customerRole.id,\n          active: true\n        })\n        .withGraphFetched('[role]')\n    ])\n\n    console.log(user)\n\n    const free_delivery = await FreeDelivery.query().insert({\n      user_id: user.id\n    })\n\n    return {\n      user,\n      free_delivery\n    }\n  })\n}\n\nexport const updateNewUserService = async (personal_details, user) => {\n  return await transaction(User, async User => {\n    //  clean up data\n    delete personal_details.phone_number\n    delete personal_details.role_id\n    delete personal_details.logistics_company_id\n    personal_details.password = await encryptPassword(personal_details.password)\n\n    const user_data = await User.query()\n      .patchAndFetchById(user.id, personal_details)\n      .withGraphFetched('[role]')\n\n    return {\n      user_data\n    }\n  })\n}\n\nexport default {\n  newCustomerService,\n  updateNewUserService\n}\n"],"file":"UserService.js"}