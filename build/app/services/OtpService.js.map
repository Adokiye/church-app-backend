{"version":3,"sources":["../../../src/app/services/OtpService.js"],"names":["OtpService","phone_number","action","otp","Otp","query","findOne","otpToCreate","patchAndFetchById","id","otp_token","JwtService","sign","expiresIn","process","env","OTP_EXPIRATION","insert","instance"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;IAEaA,U;;;;;;;;mGACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBC,gBAAAA,YAAhB,QAAgBA,YAAhB,EAA8BC,MAA9B,QAA8BA,MAA9B;AACQC,gBAAAA,GADR,GACc,MADd;AAAA;AAAA,uBAE4BC,gBAAIC,KAAJ,GAAYC,OAAZ,CAAoB;AAC5CL,kBAAAA,YAAY,EAAZA,YAD4C;AAE5CC,kBAAAA,MAAM,EAANA;AAF4C,iBAApB,WAInB;AAAA,yBAAM,KAAN;AAAA,iBAJmB,CAF5B;;AAAA;AAEQK,gBAAAA,WAFR;;AAAA,qBASMA,WATN;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAUUH,gBAAIC,KAAJ,GAAYG,iBAAZ,CAA8BD,WAAW,CAACE,EAA1C,EAA6C;AACjDC,kBAAAA,SAAS,EAAEC,uBAAWC,IAAX,CACT;AAAEX,oBAAAA,YAAY,EAAZA,YAAF;AAAgBE,oBAAAA,GAAG,EAAHA,GAAhB;AAAqBD,oBAAAA,MAAM,EAANA;AAArB,mBADS,EAET;AAAEW,oBAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B;AAA3C,mBAFS;AADsC,iBAA7C,CAVV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAkBUZ,gBAAIC,KAAJ,GAAYY,MAAZ,CAAmB;AACvBhB,kBAAAA,YAAY,EAAZA,YADuB;AAEvBC,kBAAAA,MAAM,EAANA,MAFuB;AAGvBQ,kBAAAA,SAAS,EAAEC,uBAAWC,IAAX,CACT;AAAEX,oBAAAA,YAAY,EAAZA,YAAF;AAAgBE,oBAAAA,GAAG,EAAHA,GAAhB;AAAqBD,oBAAAA,MAAM,EAANA;AAArB,mBADS,EAET;AAAEW,oBAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B;AAA3C,mBAFS;AAHY,iBAAnB,CAlBV;;AAAA;AAAA,iDA2BS;AAAEb,kBAAAA,GAAG,EAAHA;AAAF,iBA3BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AA+BF,IAAMe,QAAQ,GAAG,IAAIlB,UAAJ,EAAjB;eAEekB,Q","sourcesContent":["import Otp from \"../models/otp\";\nimport JwtService from \"./JwtService\";\n\nexport class OtpService {\n  async sendOtp({ phone_number, action }) {\n    const otp = \"2021\";\n    const otpToCreate = await Otp.query().findOne({\n      phone_number,\n      action,\n    })\n    .catch(() => false\n    );\n\n    if (otpToCreate) {\n      await Otp.query().patchAndFetchById(otpToCreate.id,{\n        otp_token: JwtService.sign(\n          { phone_number, otp, action },\n          { expiresIn: process.env.OTP_EXPIRATION || \"10m\" }\n        ),\n      });\n    } else {\n\n      await Otp.query().insert({\n        phone_number,\n        action,\n        otp_token: JwtService.sign(\n          { phone_number, otp, action },\n          { expiresIn: process.env.OTP_EXPIRATION || \"10m\" }\n        ),\n      });\n    }\n    return { otp };\n  }\n}\n\nconst instance = new OtpService();\n\nexport default instance;\n"],"file":"OtpService.js"}