{"version":3,"sources":["../../../src/app/cron-jobs/get-brand-menu.js"],"names":["jobEnvironment","development","production","job","schedule","scheduleJob","NODE_ENV","console","log","Brand","query","e","brands","MealCategorySelectionType","meal_category_selection_types","i","length","posist_data","customer_key","response","data","menu_data","j","category_data","super_meal_category","superCategory","SuperMealCategory","findOne","_id","superMealCategoryToCreate","patchAndFetchById","id","name","superCategoryName","insert","MealCategory","mealCategoryToCreate","categoryName","super_meal_category_id","meal_category_selection_type_id","Meal","mealToCreate","meal_category_id","is_addon","isAddOn","is_combo","isCombo","preparation_time","preparationTime","time","toString","mapItems","k","mealsAddonToCreate","addon","Addon","meal_addon_id","meal_id"],"mappings":"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","sourcesContent":["import schedule from 'node-schedule'\nimport Brand from '../models/brand'\nimport MealCategory from '../models/meal_category'\nimport SuperMealCategory from '../models/supermeal_category'\nimport Meal from '../models/meal'\nimport Addon from '../models/addons'\nimport MealCategorySelectionType from '../models/meal_category_selection_type'\nimport { NODE_ENV } from '../config'\nimport { getPosistBrandMenu } from '../helpers'\n\nconst jobEnvironment = {\n  development: '* * * * *',\n  production: '*/10 * * * *'\n}\n\nconst job = schedule.scheduleJob(jobEnvironment[NODE_ENV], async () => {\n  console.log('Task: Updating BRAND MENU')\n  const brands = await Brand.query().catch(e => [])\n  const meal_category_selection_types = await MealCategorySelectionType.query().catch(\n    e => []\n  )\n  for (let i = 0; i < brands.length; i++) {\n    const response = await getPosistBrandMenu(\n      brands[i].posist_data.customer_key\n    )\n    if (!response.data) {\n      console.log(response)\n    } else {\n      //loop through response data\n      const menu_data = response.data\n      for (let j = 0; j < menu_data.length; j++) {\n        // first check if category exists\n        let category_data = menu_data[j].category_data\n        let super_meal_category = category_data.superCategory\n        // check if super meal category exists, if not create it\n        let superMealCategoryToCreate = await SuperMealCategory.query()\n          .findOne({\n            'posist_data:_id': super_meal_category._id\n          })\n          .catch(() => false)\n        console.log(superMealCategoryToCreate)\n        if (superMealCategoryToCreate) {\n          superMealCategoryToCreate = await SuperMealCategory.query().patchAndFetchById(\n            superMealCategoryToCreate.id,\n            {\n              name: super_meal_category.superCategoryName,\n              posist_data: super_meal_category\n            }\n          )\n        } else {\n          superMealCategoryToCreate = await SuperMealCategory.query().insert({\n            posist_data: super_meal_category,\n            name: super_meal_category.superCategoryName\n          })\n        }\n        //do the same for the meal category\n        let mealCategoryToCreate = await MealCategory.query()\n          .findOne({\n            'posist_data:_id': category_data._id\n          })\n          .catch(() => false)\n        console.log(mealCategoryToCreate)\n        if (mealCategoryToCreate) {\n          mealCategoryToCreate = await MealCategory.query().patchAndFetchById(\n            mealCategoryToCreate.id,\n            {\n              name: category_data.categoryName,\n              super_meal_category_id: superMealCategoryToCreate.id,\n              posist_data: category_data\n            }\n          )\n        } else {\n          mealCategoryToCreate = await MealCategory.query().insert({\n            posist_data: category_data,\n            name: category_data.categoryName,\n            super_meal_category_id: superMealCategoryToCreate.id,\n            meal_category_selection_type_id: meal_category_selection_types[0].id // set default meal category selection type\n          })\n        }\n        //create or update the meal details\n        let mealToCreate = await Meal.query()\n          .findOne({\n            'posist_data:_id': menu_data[j]._id\n          })\n          .catch(() => false)\n        console.log(mealToCreate)\n        if (mealToCreate) {\n          mealToCreate = await Meal.query().patchAndFetchById(mealToCreate.id, {\n            name: menu_data[j].name,\n            meal_category_id: mealCategoryToCreate.id,\n            posist_data: menu_data[j],\n            is_addon: menu_data[j].isAddOn,\n            is_combo: menu_data[j].isCombo,\n            preparation_time: menu_data[j].preparationTime.time.toString()\n          })\n        } else {\n          mealToCreate = await Meal.query().insert({\n            name: menu_data[j].name,\n            meal_category_id: mealCategoryToCreate.id,\n            posist_data: menu_data[j],\n            is_addon: menu_data[j].isAddOn,\n            is_combo: menu_data[j].isCombo,\n            preparation_time: menu_data[j].preparationTime.time.toString()\n          })\n        }\n        // create addon if meal has addons and isaddon is false\n        if (!menu_data[j].isAddOn && menu_data[j].mapItems.length > 0) {\n          for (let k = 0; k < menu_data[j].mapItems.length; k++) {\n            let mealsAddonToCreate = await Meal.query()\n              .findOne({\n                'posist_data:_id': menu_data[j].mapItems[k]._id\n              })\n              .catch(() => false)\n            let addon\n            console.log(mealsAddonToCreate)\n            if (mealsAddonToCreate) {\n              addon = await Addon.query()\n                .findOne({\n                  meal_addon_id: mealsAddonToCreate.id,\n                  meal_id: mealToCreate.id\n                })\n                .catch(() => false)\n              //if addon doesn't exist\n              if (!addon) {\n                addon = await Addon.query().insert({\n                  meal_addon_id: mealsAddonToCreate.id,\n                  meal_id: mealToCreate.id\n                })\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n})\n\nexport default job\n"],"file":"get-brand-menu.js"}